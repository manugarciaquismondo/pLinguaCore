/* Generated By:JavaCC: Do not edit this line. PlinguaJavaCcParserTokenManager.java */
package org.gcn.plinguacore.parser.input.plingua;
import java.io.InputStream;
import java.io.StringReader;
import java.util.List;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.Stack;
import java.util.Iterator;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Set;
import java.util.HashSet;
import org.gcn.plinguacore.parser.input.byteCounter.InputStreamWrapper;
import org.gcn.plinguacore.parser.input.byteCounter.StringReaderWrapper;
import org.gcn.plinguacore.util.HashMultiSet;
import org.gcn.plinguacore.util.MultiSet;
import org.gcn.plinguacore.util.PlinguaCoreException;
import org.gcn.plinguacore.util.psystem.Label;
import org.gcn.plinguacore.util.psystem.Psystem;
import org.gcn.plinguacore.util.psystem.cellLike.membrane.CellLikeMembrane;
import org.gcn.plinguacore.util.psystem.cellLike.membrane.CellLikeMembraneFactory;
import org.gcn.plinguacore.util.psystem.cellLike.membrane.CellLikeSkinMembrane;
import org.gcn.plinguacore.util.psystem.tissueLike.membrane.TissueLikeMembraneStructure;
import org.gcn.plinguacore.util.psystem.tissueLike.membrane.TissueLikeMembrane;
import org.gcn.plinguacore.util.psystem.tissueLike.membrane.TissueLikeMembraneFactory;
import org.gcn.plinguacore.util.psystem.factory.AbstractPsystemFactory;
import org.gcn.plinguacore.util.psystem.rule.AbstractRuleFactory;
import org.gcn.plinguacore.util.psystem.rule.IStochasticRule;
import org.gcn.plinguacore.util.psystem.rule.InnerRuleMembrane;
import org.gcn.plinguacore.util.psystem.rule.LeftHandRule;
import org.gcn.plinguacore.util.psystem.rule.OuterRuleMembrane;
import org.gcn.plinguacore.util.psystem.rule.RightHandRule;
import org.gcn.plinguacore.util.psystem.rule.IRule;
import org.gcn.plinguacore.util.psystem.rule.spiking.SpikingRule;
import org.gcn.plinguacore.util.psystem.spiking.membrane.SpikingMembrane;
import org.gcn.plinguacore.util.psystem.spiking.membrane.SpikingMembraneStructure;
import org.gcn.plinguacore.util.Pair;
import org.gcn.plinguacore.util.psystem.spiking.membrane.Astrocyte;
import org.gcn.plinguacore.util.psystem.spiking.membrane.HybridAstrocyte;
import org.gcn.plinguacore.util.psystem.spiking.membrane.FunctionalAstrocyte;
import org.gcn.plinguacore.util.psystem.spiking.membrane.AstrocyteFunction;
import org.gcn.plinguacore.util.psystem.spiking.membrane.EvaluableFunction;
import org.gcn.plinguacore.util.psystem.tissueLike.membrane.TissueLikeMembraneStructure;
import org.gcn.plinguacore.util.psystem.rule.guard.*;
import org.gcn.plinguacore.util.psystem.probabilisticGuarded.ProbabilisticGuardedPsystem;
import org.gcn.plinguacore.util.psystem.rule.guard.probabilisticGuarded.*;
import org.gcn.plinguacore.util.psystem.simplekernel.membrane.SimpleKernelLikeMembraneStructure;
import org.gcn.plinguacore.util.psystem.simplekernel.membrane.SimpleKernelLikeMembrane;
import org.gcn.plinguacore.util.psystem.simplekernel.membrane.SimpleKernelLikeMembraneFactory;
import org.gcn.plinguacore.util.psystem.rule.simplekernel.KernelRuleTypes;
import org.gcn.plinguacore.util.psystem.rule.regenerative.RegenerativeRuleTypes;
import org.gcn.plinguacore.util.psystem.membrane.ChangeableMembrane;
import org.gcn.plinguacore.util.psystem.cellLike.CellLikeInfEnvPsystem;
import org.gcn.plinguacore.util.psystem.fuzzy.membrane.*;
import org.gcn.plinguacore.util.psystem.fuzzy.*;
import org.gcn.plinguacore.util.psystem.spiking.SpikingConstants;
import org.gcn.plinguacore.util.psystem.rule.simplekernel.DivisionKernelLikeRule;
import org.gcn.plinguacore.util.psystem.regenerative.membrane.RegenerativeMembraneStructure;
import org.gcn.plinguacore.util.psystem.rule.regenerative.IRegenerativeLikeRule;
import org.gcn.plinguacore.util.psystem.rule.regenerative.CommunicationRegenerativeLikeRule;
import org.gcn.plinguacore.util.psystem.regenerative.RegenerativePsystem;

/** Token Manager. */
public class PlinguaJavaCcParserTokenManager implements PlinguaJavaCcParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 3;
         return jjMoveNfa_0(0, 0);
      case 10:
         jjmatchedKind = 5;
         return jjMoveNfa_0(0, 0);
      case 13:
         jjmatchedKind = 4;
         return jjMoveNfa_0(0, 0);
      case 32:
         jjmatchedKind = 2;
         return jjMoveNfa_0(0, 0);
      case 35:
         jjmatchedKind = 47;
         return jjMoveNfa_0(0, 0);
      case 36:
         jjmatchedKind = 37;
         return jjMoveNfa_0(0, 0);
      case 37:
         jjmatchedKind = 65;
         return jjMoveNfa_0(0, 0);
      case 38:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L);
      case 39:
         jjmatchedKind = 38;
         return jjMoveNfa_0(0, 0);
      case 40:
         jjmatchedKind = 57;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 58;
         return jjMoveNfa_0(0, 0);
      case 42:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L);
      case 43:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 44:
         jjmatchedKind = 54;
         return jjMoveNfa_0(0, 0);
      case 45:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x48000000000L, 0x0L);
      case 46:
         jjmatchedKind = 43;
         return jjMoveNfa_0(0, 0);
      case 47:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x2L, 0x4L);
      case 58:
         jjmatchedKind = 59;
         return jjMoveNfa_0(0, 0);
      case 59:
         jjmatchedKind = 51;
         return jjMoveNfa_0(0, 0);
      case 60:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x200L);
      case 61:
         jjmatchedKind = 68;
         return jjMoveNfa_0(0, 0);
      case 62:
         jjmatchedKind = 70;
         return jjMoveNfa_0(0, 0);
      case 63:
         jjmatchedKind = 48;
         return jjMoveNfa_0(0, 0);
      case 64:
         return jjMoveStringLiteralDfa1_0(0x4007ffff8f00L, 0x1ffff8000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 91:
         jjmatchedKind = 55;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 56;
         return jjMoveNfa_0(0, 0);
      case 94:
         jjmatchedKind = 67;
         return jjMoveNfa_0(0, 0);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 123:
         jjmatchedKind = 52;
         return jjMoveNfa_0(0, 0);
      case 124:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x2000L);
      case 125:
         jjmatchedKind = 53;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L);
      case 38:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 1;
         }
         break;
      case 42:
         if ((active0 & 0x2L) != 0L)
         {
            jjmatchedKind = 1;
            jjmatchedPos = 1;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0x38000000000L, active1, 0L);
      case 47:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x880000L, active1, 0L);
      case 68:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0x400000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x5000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0x17e000000L);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x3f4438f00L, active1, 0x19f8000L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0x80200000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x880000L, active1, 0L);
      case 100:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x5000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0x17e000000L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x3f4438f00L, active1, 0x19f8000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0x80200000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
      case 124:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000000000L, active1, 0L);
      case 62:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 2;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x110400000L, active1, 0xa01c0000L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000L);
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x8800000L, active1, 0L);
      case 70:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 2;
         }
         break;
      case 73:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40110000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x202000L, active1, 0x1000000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x50e0000L, active1, 0x40038000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x18000000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4200000L);
      case 83:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x80000e00L, active1, 0L);
      case 84:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 2;
         }
         break;
      case 85:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0x400000L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0x2000000L);
      case 87:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x110400000L, active1, 0xa01c0000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8800000L, active1, 0L);
      case 102:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 2;
         }
         break;
      case 105:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40110000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x202000L, active1, 0x1000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x50e0000L, active1, 0x40038000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x18000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4200000L);
      case 115:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x80000e00L, active1, 0L);
      case 116:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 2;
         }
         break;
      case 117:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0x400000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0x2000000L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 49:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 3;
         }
         break;
      case 50:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 3;
         }
         break;
      case 62:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 3;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x600000000L, active1, 0x2000000L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0x100000000L);
      case 71:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 3;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x20800800L, active1, 0x8000000L);
      case 76:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 3;
         }
         break;
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000L);
      case 78:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0x20000000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0x11a00000L);
      case 82:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L, active1, 0x80000000L);
      case 83:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0x1c0000L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x1020000L, active1, 0x4038000L);
      case 88:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x600000000L, active1, 0x2000000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0x100000000L);
      case 103:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 3;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x20800800L, active1, 0x8000000L);
      case 108:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 3;
         }
         break;
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000L);
      case 110:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0x20000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0x11a00000L);
      case 114:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L, active1, 0x80000000L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0x1c0000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1020000L, active1, 0x4038000L);
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 4;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x30000000L, active1, 0x1000000L);
      case 68:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 4;
         }
         break;
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000L);
      case 76:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0x4000000L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000L);
      case 78:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000800L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000L);
      case 81:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 4;
         }
         break;
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0x2000000L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0L);
      case 84:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1f8000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0x10800000L);
      case 89:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x30000000L, active1, 0x1000000L);
      case 100:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 4;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000L);
      case 108:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0x4000000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000L);
      case 110:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000800L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000L);
      case 113:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 4;
         }
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0x2000000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1f8000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0x10800000L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 5;
         }
         break;
      case 69:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000L);
      case 70:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x800L, active1, 0x100000L);
      case 71:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000L);
      case 72:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 5;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0x2000000L);
      case 76:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0x800000L);
      case 82:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x38000L);
      case 83:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000L);
      case 84:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 5;
         }
         break;
      case 89:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 5;
         }
         break;
      case 100:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 5;
         }
         break;
      case 101:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000L);
      case 102:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x800L, active1, 0x100000L);
      case 103:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000L);
      case 104:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 5;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0x2000000L);
      case 108:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0x800000L);
      case 114:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x38000L);
      case 115:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 5;
         }
         break;
      case 121:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0L);
      case 68:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L, active1, 0x1038000L);
      case 72:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0L);
      case 100:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L, active1, 0x1038000L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000L);
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000L);
      case 72:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 7;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L, active1, 0x2100000L);
      case 83:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x38000L);
      case 84:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000L);
      case 104:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 7;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L, active1, 0x2100000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x38000L);
      case 116:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 67:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 8;
         }
         break;
      case 76:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000L);
      case 84:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 8;
         }
         break;
      case 86:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 8;
         }
         break;
      case 89:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 8;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x38000L);
      case 99:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 8;
         }
         break;
      case 108:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000L);
      case 116:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 8;
         }
         break;
      case 118:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 8;
         }
         break;
      case 121:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 8;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa10_0(active1, 0x8000L);
      case 76:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 9;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa10_0(active1, 0x10000L);
      case 83:
         return jjMoveStringLiteralDfa10_0(active1, 0x20000L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active1, 0x8000L);
      case 108:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 9;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa10_0(active1, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active1, 0x20000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private int jjMoveStringLiteralDfa10_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active1, 0x10000L);
      case 73:
         return jjMoveStringLiteralDfa11_0(active1, 0x8000L);
      case 85:
         return jjMoveStringLiteralDfa11_0(active1, 0x20000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active1, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active1, 0x8000L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active1, 0x20000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 10);
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa12_0(active1, 0x20000L);
      case 78:
         return jjMoveStringLiteralDfa12_0(active1, 0x8000L);
      case 84:
         return jjMoveStringLiteralDfa12_0(active1, 0x10000L);
      case 109:
         return jjMoveStringLiteralDfa12_0(active1, 0x20000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active1, 0x8000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active1, 0x10000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 11);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 11);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa13_0(active1, 0x8000L);
      case 77:
         return jjMoveStringLiteralDfa13_0(active1, 0x20000L);
      case 85:
         return jjMoveStringLiteralDfa13_0(active1, 0x10000L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active1, 0x8000L);
      case 109:
         return jjMoveStringLiteralDfa13_0(active1, 0x20000L);
      case 117:
         return jjMoveStringLiteralDfa13_0(active1, 0x10000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 12);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 12);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa14_0(active1, 0x20000L);
      case 82:
         return jjMoveStringLiteralDfa14_0(active1, 0x18000L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active1, 0x20000L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active1, 0x18000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 13);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 13);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa15_0(active1, 0x10000L);
      case 84:
         return jjMoveStringLiteralDfa15_0(active1, 0x20000L);
      case 89:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 14;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa15_0(active1, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active1, 0x20000L);
      case 121:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 14;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 14);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 14);
   }
   switch(curChar)
   {
      case 76:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 15;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa16_0(active1, 0x20000L);
      case 108:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 15;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa16_0(active1, 0x20000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 15);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 15);
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa17_0(active1, 0x20000L);
      case 114:
         return jjMoveStringLiteralDfa17_0(active1, 0x20000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 16);
}
private int jjMoveStringLiteralDfa17_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 16);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa18_0(active1, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active1, 0x20000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 17);
}
private int jjMoveStringLiteralDfa18_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 17);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 17);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa19_0(active1, 0x20000L);
      case 101:
         return jjMoveStringLiteralDfa19_0(active1, 0x20000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 18);
}
private int jjMoveStringLiteralDfa19_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 18);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 18);
   }
   switch(curChar)
   {
      case 83:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 19;
         }
         break;
      case 115:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 19;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 19);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 32;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 61)
                     jjAddStates(4, 5);
                  else if (curChar == 60)
                     jjCheckNAddTwoStates(17, 22);
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 46)
                     jjCheckNAdd(6);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(1, 2);
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 1:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 34 && kind > 35)
                     kind = 35;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if (curChar == 46)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 8:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if (curChar == 58 && kind > 60)
                     kind = 60;
                  break;
               case 12:
                  if (curChar == 61 && kind > 71)
                     kind = 71;
                  break;
               case 13:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 61 && kind > 72)
                     kind = 72;
                  break;
               case 15:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 60)
                     jjCheckNAddTwoStates(17, 22);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 19:
                  if (curChar == 46)
                     jjAddStates(9, 10);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 22:
                  if (curChar == 62 && kind > 78)
                     kind = 78;
                  break;
               case 23:
                  if (curChar == 63)
                     jjCheckNAddTwoStates(19, 22);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddStates(0, 3);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAddStates(14, 16);
                  break;
               case 27:
                  if (curChar == 46)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAddTwoStates(28, 7);
                  break;
               case 29:
                  if (curChar == 61)
                     jjAddStates(4, 5);
                  break;
               case 30:
                  if (curChar == 60 && kind > 71)
                     kind = 71;
                  break;
               case 31:
                  if (curChar == 62 && kind > 72)
                     kind = 72;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(4);
                  break;
               case 1:
                  jjAddStates(17, 18);
                  break;
               case 7:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(19, 20);
                  break;
               case 17:
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 20:
               case 21:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(17, 18);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 32 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x40L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   25, 26, 27, 7, 30, 31, 18, 19, 22, 20, 23, 19, 21, 22, 26, 27, 
   7, 1, 2, 8, 9, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, "\44", "\47", 
"\55\55\76", "\74\55\55\76", "\174\55\55\76", "\55\41\76", "\56", null, null, null, "\43", 
"\77", "\46", "\174", "\73", "\173", "\175", "\54", "\133", "\135", "\50", "\51", 
"\72", null, "\53", "\55", "\52", "\57", "\45", "\57\57", "\136", "\75", "\74", 
"\76", null, null, "\74\76", "\53\75", "\52\75", "\46\46", "\174\174", null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "WithinComment",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, 1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0x1ffffffffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
static final long[] jjtoMore = {
   0x80L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[32];
private final int[] jjstateSet = new int[64];
protected char curChar;
/** Constructor. */
public PlinguaJavaCcParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public PlinguaJavaCcParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 32; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
