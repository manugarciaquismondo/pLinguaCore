/* Generated By:JavaCC: Do not edit this line. PlinguaJavaCcParser.java */
package org.gcn.plinguacore.parser.input.plingua;

import java.io.InputStream;
import java.io.StringReader;
import java.util.List;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.Stack;
import java.util.Iterator;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Set;
import java.util.HashSet;

import org.gcn.plinguacore.parser.input.byteCounter.InputStreamWrapper;
import org.gcn.plinguacore.parser.input.byteCounter.StringReaderWrapper;
import org.gcn.plinguacore.util.HashMultiSet;
import org.gcn.plinguacore.util.MultiSet;
import org.gcn.plinguacore.util.PlinguaCoreException;
import org.gcn.plinguacore.util.psystem.Label;
import org.gcn.plinguacore.util.psystem.Psystem;
import org.gcn.plinguacore.util.psystem.cellLike.membrane.CellLikeMembrane;
import org.gcn.plinguacore.util.psystem.cellLike.membrane.CellLikeMembraneFactory;
import org.gcn.plinguacore.util.psystem.cellLike.membrane.CellLikeSkinMembrane;
import org.gcn.plinguacore.util.psystem.tissueLike.membrane.TissueLikeMembraneStructure;
import org.gcn.plinguacore.util.psystem.tissueLike.membrane.TissueLikeMembrane;
import org.gcn.plinguacore.util.psystem.tissueLike.membrane.TissueLikeMembraneFactory;
import org.gcn.plinguacore.util.psystem.factory.AbstractPsystemFactory;
import org.gcn.plinguacore.util.psystem.rule.AbstractRuleFactory;
import org.gcn.plinguacore.util.psystem.rule.IStochasticRule;
import org.gcn.plinguacore.util.psystem.rule.InnerRuleMembrane;
import org.gcn.plinguacore.util.psystem.rule.LeftHandRule;
import org.gcn.plinguacore.util.psystem.rule.OuterRuleMembrane;
import org.gcn.plinguacore.util.psystem.rule.RightHandRule;
import org.gcn.plinguacore.util.psystem.rule.IRule;
import org.gcn.plinguacore.util.psystem.rule.spiking.SpikingRule;
import org.gcn.plinguacore.util.psystem.spiking.membrane.SpikingMembrane;
import org.gcn.plinguacore.util.psystem.spiking.membrane.SpikingMembraneStructure;
import org.gcn.plinguacore.util.Pair;
import org.gcn.plinguacore.util.psystem.spiking.membrane.Astrocyte;
import org.gcn.plinguacore.util.psystem.spiking.membrane.HybridAstrocyte;
import org.gcn.plinguacore.util.psystem.spiking.membrane.FunctionalAstrocyte;
import org.gcn.plinguacore.util.psystem.spiking.membrane.AstrocyteFunction;
import org.gcn.plinguacore.util.psystem.spiking.membrane.EvaluableFunction;
import org.gcn.plinguacore.util.psystem.tissueLike.membrane.TissueLikeMembraneStructure;
import org.gcn.plinguacore.util.psystem.rule.guard.*;
import org.gcn.plinguacore.util.psystem.probabilisticGuarded.ProbabilisticGuardedPsystem;
import org.gcn.plinguacore.util.psystem.rule.guard.probabilisticGuarded.*;
import org.gcn.plinguacore.util.psystem.simplekernel.membrane.SimpleKernelLikeMembraneStructure;
import org.gcn.plinguacore.util.psystem.simplekernel.membrane.SimpleKernelLikeMembrane;
import org.gcn.plinguacore.util.psystem.simplekernel.membrane.SimpleKernelLikeMembraneFactory;
import org.gcn.plinguacore.util.psystem.rule.simplekernel.KernelRuleTypes;
import org.gcn.plinguacore.util.psystem.rule.regenerative.RegenerativeRuleTypes;
import org.gcn.plinguacore.util.psystem.membrane.ChangeableMembrane;
import org.gcn.plinguacore.util.psystem.cellLike.CellLikeInfEnvPsystem;
import org.gcn.plinguacore.util.psystem.fuzzy.membrane.*;
import org.gcn.plinguacore.util.psystem.fuzzy.*;
import org.gcn.plinguacore.util.psystem.spiking.SpikingConstants;
import org.gcn.plinguacore.util.psystem.rule.simplekernel.DivisionKernelLikeRule;
import org.gcn.plinguacore.util.psystem.regenerative.membrane.RegenerativeMembraneStructure;
import org.gcn.plinguacore.util.psystem.rule.regenerative.IRegenerativeLikeRule;
import org.gcn.plinguacore.util.psystem.rule.regenerative.CommunicationRegenerativeLikeRule;
import org.gcn.plinguacore.util.psystem.regenerative.RegenerativePsystem;

class PlinguaJavaCcParser extends PlinguaProgram implements PlinguaJavaCcParserConstants {


        private static PlinguaJavaCcParser singleton=null;
        private static Set<String > nonCheckedVariables;
        private String expr=null;
        private String ruleType = null;
        private boolean computeEfficiencyAttributes=false;
        private boolean existsBuddingOrDivisionRules = false;
        private boolean existsFunctionalAstrocytes = false;

        private boolean isSpikingPsystem()
        {
                return RuleChecker.matchModelID(getPsystem(), "spiking_psystems");
        }

        private boolean isFuzzyPsystem()
        {
                return RuleChecker.matchModelID(getPsystem(), "fuzzy_psystems");
        }

        private boolean isTrapezoidalFuzzyValue()
        {
                return isFuzzyPsystem() && ((FuzzyPsystem) getPsystem()).getFvalueType() == 0;
        }

        private boolean isRealFuzzyValue()
        {
                return isFuzzyPsystem() && ((FuzzyPsystem) getPsystem()).getFvalueType() == 1;
        }

        private boolean isWeightedFuzzyPsystem()
        {
                return isFuzzyPsystem() && ((FuzzyPsystem) getPsystem()).getSystemType() == 2;
        }

        private boolean isCellLikeInfEnvPsystem()
        {
                return RuleChecker.matchModelID(getPsystem(), "infEnv_symport_antiport");
        }

        public boolean isKernelPsystem()
        {
                return RuleChecker.matchModelID(getPsystem(), "simple_kernel_psystems");
        }

        public boolean isProbabilisticGuardedPsystem()
        {
                return RuleChecker.matchModelID(getPsystem(), "probabilistic_guarded_psystems")||
RuleChecker.matchModelID(getPsystem(), "overlappable_probabilistic_guarded_psystems");
        }

        public boolean isRegenerativePsystem()
        {
                return isNonSimpleRegenerativePsystem()||isSimpleRegenerativePsystem();
        }

        public boolean isNonSimpleRegenerativePsystem(){
                return RuleChecker.matchModelID(getPsystem(), "regenerative_psystems");
        }
                public boolean isSimpleRegenerativePsystem()
        {
                return RuleChecker.matchModelID(getPsystem(), "simple_regenerative_psystems");
        }

        protected void updateRegenerativeDictionary(String l1, String l2, Token token) throws PlinguaSemanticsException{
                try     {
                        ((RegenerativePsystem)getPsystem()).updateInitialLinks(l1,l2);
                        writeInfo("Updating regenerative dictionary: ("+l1+", "+l2+")",4);
                }catch(Exception ex)
                {
                        throwSemanticsException(ex.getMessage(),token,token);
                }
        }

        private boolean isTissuePsystem()
    {
        return RuleChecker.matchModelID(getPsystem(), "tissue_psystems");
    }

       private void doSentence(Stack<Token>ranges,Token sentenceToken,PlinguaEnvironment env,boolean execute) throws ParseException
        {checkStopped();
                if (env.getDepthLevel()>0)
                        return;
                if (ranges.isEmpty())
                {
                        if (execute)
                        {
                                Token currentToken=token;
                                token=sentenceToken;
                                jj_ntk=-1;
                                getCurrentEnvironment().disableSafeMode();
                                instruction();
                                getCurrentEnvironment().enableSafeMode();
                                token=currentToken;
                                jj_ntk=-1;
                        }
                }
                else
                {
                        Token rangeToken = ranges.pop();
                        Token currentToken=token;
                        token=rangeToken;
                        jj_ntk=-1;
                        getCurrentEnvironment().disableSafeMode();
                    Range range=range(null,null);
                        getCurrentEnvironment().enableSafeMode();
                        token=currentToken;
                        jj_ntk=-1;
                        double begin,end;
                        begin=range.beginNumber.doubleValue();
                        end=range.endNumber.doubleValue();

                        if (range.variable==null)
                                doSentence(ranges,sentenceToken,env,execute && begin!=end);
                        else
                        {
                                if (range.firstOperation==Range.LESS_OPERATION) begin++;
                                if (range.secondOperation==Range.LESS_OPERATION) end--;
                                for(double i=begin;i<=end;i++)
                                {checkStopped();
                                        getCurrentEnvironment().disableSafeMode();
                                        env.setVariable(range.variable,getNumber(i));
                                        getCurrentEnvironment().enableSafeMode();
                                        doSentence(ranges,sentenceToken,env,execute);
                                }
                                getCurrentEnvironment().disableSafeMode();
                                env.removeVariable(range.variable);
                                getCurrentEnvironment().enableSafeMode();
                        }
                        ranges.push(rangeToken);

                }

        }





        static class Range {

                public static final boolean LESS_OPERATION=false;
                public static final boolean LESS_OR_EQUAL_OPERATION=true;

                protected Number beginNumber;
                protected boolean firstOperation;
                protected String variable;
                protected boolean secondOperation;
                protected Number endNumber;
                public Range(Number beginNumber, boolean firstOperation, String variable, boolean secondOperation, Number endNumber) {
                        super();
                        this.beginNumber = beginNumber;
                        this.firstOperation = firstOperation;
                        this.variable = variable;
                        this.secondOperation = secondOperation;
                        this.endNumber = endNumber;
                }


        }

        private static Psystem parse(PlinguaJavaCcParser parser,PlinguaInputParser inputParser) throws PlinguaCoreException
        {
                try
                {

                        if (inputParser.getThread()!=null&&inputParser.getThread().isThreadStopped())
                                throw new PlinguaCoreException("Stopped");

                        parser.reset();
                        parser.setInputParser(inputParser);
                        parser.grammar();

                        if (inputParser.getThread()!=null&&inputParser.getThread().isThreadStopped())
                                throw new PlinguaCoreException("Stopped");
                }
                catch(ParseException ex)
                {
                  if (ex.getMessage().startsWith("Stopped"))
                        throw new PlinguaCoreException("Stopped");
                  else
                        parser.writeError(ex);
                }
                catch(TokenMgrError er)
                {
                        parser.writeError(er);
                }
                if (parser.isError())
                        throw new PlinguaCoreException("Parser process finished with errors");

                return parser.getPsystem();
        }

                private static PlinguaJavaCcParser getInstance(InputStream stream)
        {
                        InputStreamWrapper streamWrapper = new InputStreamWrapper(stream);
                if (singleton==null)
                {

                        singleton= new PlinguaJavaCcParser(streamWrapper);
                        singleton.ReInit(streamWrapper);
                        singleton.setStream(stream);
                } else
                        singleton.ReInit(streamWrapper);


                byteCounter=streamWrapper;

                return singleton;
        }
        private static PlinguaJavaCcParser getInstance(StringReader reader)
        {
                        StringReaderWrapper readerWrapper= new StringReaderWrapper(reader);
                if (singleton==null)
                {
                        singleton= new PlinguaJavaCcParser(readerWrapper);
                        singleton.ReInit(readerWrapper);
                 }
                 else
                        singleton.ReInit(readerWrapper);

                byteCounter=readerWrapper;
                return singleton;
        }

        protected static Psystem parse(InputStream stream,PlinguaInputParser inputParser) throws PlinguaCoreException
        {


                return parse(getInstance(stream),inputParser);
        }

        protected static Psystem parse(StringReader reader, PlinguaInputParser inputParser) throws PlinguaCoreException
        {
                return parse(getInstance(reader),inputParser);
        }

        @Override
        protected void doSafeCall(Token callToken) throws ParseException {
                Token returnToken=token;
                token=callToken;
                jj_ntk=-1;
                moduleBody();
                token=returnToken;
                jj_ntk=-1;
        }

  final private String string0() throws ParseException {
                            Token varTokenInit,varTokenEnd;String str;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      jj_consume_token(STRING);
                 {if (true) return token.image.substring(1,token.image.length()-1);}
      break;
    case DOLLAR:
          varTokenInit=token.next;
      str = stringVariable();
                                                        varTokenEnd=token;getCurrentEnvironment().getStringVariable(str,varTokenInit,varTokenEnd,nonCheckedVariables);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private String string() throws ParseException {
                           String str,str1;
    str = string0();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(PLUS);
      str1 = string0();
                               if (!getCurrentEnvironment().isSafeMode())str+=str1;
    }
         {if (true) return str;}
    throw new Error("Missing return statement in function");
  }

  final private String indexes() throws ParseException {
                            Number n;String result;
    jj_consume_token(LBRACE);
    n = number();
                   result="{"+n;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      n = number();
                 if(n!=null)
                result += "," + n;
        else
                result+=","+token.image;
    }
    jj_consume_token(RBRACE);
                 {if (true) return result+"}";}
    throw new Error("Missing return statement in function");
  }

  final private String numericVariable() throws ParseException {
                                    String result;String indexes="";
    jj_consume_token(ID);
             result=token.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      indexes = indexes();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
         {if (true) return result+indexes;}
    throw new Error("Missing return statement in function");
  }

  final private String stringVariable() throws ParseException {
                                   String result;
    jj_consume_token(DOLLAR);
                 result=token.image;
    jj_consume_token(ID);
         {if (true) return result+token.image;}
    throw new Error("Missing return statement in function");
  }

  final private Number number0() throws ParseException {
                            Number n;boolean neg=false;String var;Token varTokenInit,varTokenEnd;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
                        neg=true;
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NATURAL_NUMBER:
    case NUMBER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        jj_consume_token(NUMBER);
        break;
      case NATURAL_NUMBER:
        jj_consume_token(NATURAL_NUMBER);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                     n = getNumber(Double.parseDouble(token.image));
      break;
    case PI:
      jj_consume_token(PI);
                 n = getNumber(Math.PI);
      break;
    case ID:
          varTokenInit=token.next;
      var = numericVariable();
                                                         varTokenEnd=token;
      n = getCurrentEnvironment().getNumericVariable(var, varTokenInit, varTokenEnd, nonCheckedVariables);
      break;
    case LPAR:
      jj_consume_token(LPAR);
      n = number();
      jj_consume_token(RPAR);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (neg && n!=null)
                        {if (true) return getNumber(-n.doubleValue());}
                else
                        {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final private Number number01() throws ParseException {
                             Number n;Stack<Integer> op= new Stack<Integer>();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOG:
      case COS:
      case SIN:
      case FLOOR:
      case MAX0:
      case CEIL:
      case ROUND:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOG:
        jj_consume_token(LOG);
         op.push(1);
        break;
      case CEIL:
        jj_consume_token(CEIL);
                             op.push(2);
        break;
      case FLOOR:
        jj_consume_token(FLOOR);
                                                  op.push(3);
        break;
      case MAX0:
        jj_consume_token(MAX0);
                                                                      op.push(4);
        break;
      case ROUND:
        jj_consume_token(ROUND);
                                                                                           op.push(5);
        break;
      case COS:
        jj_consume_token(COS);
                                                                                                              op.push(6);
        break;
      case SIN:
        jj_consume_token(SIN);
                                                                                                                                 op.push(7);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    n = number0();
    if (getCurrentEnvironment().isSafeMode())
    {
        n=null;
        op=null;
    }
    else
    {
        while(!op.isEmpty())
        {checkStopped();
                switch(op.pop())
                {
                        case 1: /* Logaritmo en base 2 */
                                n = getNumber(Math.log(n.doubleValue())/Math.log(2));
                        break;
                        case 2: /* Parte entera por exceso */
                                n= getNumber(Math.ceil(n.doubleValue()));
                        break;
                        case 3: /* Parte entera por defecto */
                                n= getNumber(Math.floor(n.doubleValue()));
                        break;
                        case 4: /* Maximo entre un numero y cero */
                                if(n.doubleValue() < 0)
                                        n = getNumber(0.0);
                                else
                                   n = getNumber(n.doubleValue());
                        case 5: /* Redondeo */
                                n= getNumber(Math.round(n.doubleValue()));
                        case 6: /* Coseno */
                                n = getNumber(Math.cos(n.doubleValue()));
                        case 7: /* Seno */
                                n = getNumber(Math.sin(n.doubleValue()));
                        break;
                }
        }
    }

        {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final private Number number1() throws ParseException {
                            Number n1,n2;
    n1 = number01();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POW:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      jj_consume_token(POW);
      n2 = number01();
                n1 = getCurrentEnvironment().isSafeMode()?null:getNumber(Math.pow(n1.doubleValue(),n2.doubleValue()));
    }
         {if (true) return n1;}
    throw new Error("Missing return statement in function");
  }

  final private Number number2() throws ParseException {
                            Number n1,n2;int op;
    n1 = number1();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
      case DIV:
      case MOD:
      case INTDIV:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
        jj_consume_token(MUL);
               op=1;
        break;
      case DIV:
        jj_consume_token(DIV);
                            op=2;
        break;
      case MOD:
        jj_consume_token(MOD);
                                         op=3;
        break;
      case INTDIV:
        jj_consume_token(INTDIV);
                                                         op=4;
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2 = number1();
                switch (op)
                {
                        case 1:
                                n1 = getCurrentEnvironment().isSafeMode()?null:getNumber(n1.doubleValue()*n2.doubleValue());
                        break;
                        case 2:
                                n1 = getCurrentEnvironment().isSafeMode()?null:getNumber(n1.doubleValue()/n2.doubleValue());
                        break;
                        case 3:
                                n1 = getCurrentEnvironment().isSafeMode()?null:getNumber(n1.doubleValue()%n2.doubleValue());
                        break;
                        case 4:
                                n1 = getCurrentEnvironment().isSafeMode()?null:getNumber((long)(n1.doubleValue()/n2.doubleValue()));
                        break;
                }
    }
         {if (true) return n1;}
    throw new Error("Missing return statement in function");
  }

  final private Number number() throws ParseException {
                           Number n1,n2;int op;
    n1 = number2();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                op=1;
        break;
      case MINUS:
        jj_consume_token(MINUS);
                               op=2;
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2 = number2();
                switch (op)
                {
                        case 1:
                                n1 = getCurrentEnvironment().isSafeMode()?null:getNumber(n1.doubleValue()+n2.doubleValue());
                        break;
                        case 2:
                                n1 = getCurrentEnvironment().isSafeMode()?null:getNumber(n1.doubleValue()-n2.doubleValue());
                        break;
                }
    }
         {if (true) return n1;}
    throw new Error("Missing return statement in function");
  }

  final private String object() throws ParseException {
                           String name,var;Token varTokenInit,varTokenEnd;Number n;String indexes="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case DOLLAR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        jj_consume_token(ID);
               name=token.image;
        break;
      case DOLLAR:
          varTokenInit=token.next;
        var = stringVariable();
                                                        varTokenEnd=token;name = getCurrentEnvironment().getStringVariable(var, varTokenInit, varTokenEnd, nonCheckedVariables);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        indexes = indexes();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
         {if (true) return name+indexes;}
      break;
    case STRING_OBJECT:
      jj_consume_token(STRING_OBJECT);
                         {if (true) return token.image;}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private void variantDef() throws ParseException {
        String errorMsg="";
        String model="";
    jj_consume_token(VARIANT);
    jj_consume_token(STRING_OBJECT);
                model= token.image.substring(1,token.image.length()-1);
                try
                {
                          checkStopped();
                        Iterator<String>it=AbstractPsystemFactory.getModelsInfo().getModelsIterator();
                        errorMsg="Was expecting one of these models:\u005cn";
                        while(it.hasNext())
                        {
                          checkStopped();
                                errorMsg+="    * "+it.next();
                                if (it.hasNext())
                                        errorMsg+="\u005cn";
                        }

                        setPsystem(AbstractPsystemFactory.createAbstractPsystemFactory(model).createPsystem());
                        writeInfo("Model = "+model,4);

                }
                catch(Exception ex)
                {
                        throwSemanticsException(ex.getMessage(),token,token,errorMsg);
                }
  }

  final private void param(List<String> params) throws ParseException {
                                           String str;Token paramTokenInit,paramTokenEnd;
         paramTokenInit=token.next;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLLAR:
      str = stringVariable();
      break;
    case ID:
      str = numericVariable();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                paramTokenEnd=token;
                if (params.contains(str))
                        throwSemanticsException("Repeated parameter '"+str+"'",paramTokenInit,paramTokenEnd);
                params.add(str);
  }

  final private void moduleBody() throws ParseException {
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTISET:
      case FIRST_MULTISET:
      case SECOND_MULTISET:
      case INFENV_MULTISET:
      case CALL:
      case LET:
      case MU:
      case MEMB_IN:
      case MEMB_OUT:
      case MARCS:
      case MDICT:
      case MINST:
      case MSEQ:
      case MASYNCH:
      case MVALID:
      case GUARD:
      case ID:
      case DOLLAR:
      case EMPTY:
      case AMPERSAND:
      case LBRACE:
      case LSQUARE:
      case LPAR:
      case PLUS:
      case MINUS:
      case DIV:
      case OR:
      case STRING_OBJECT:
      case MOUTRES_BINARY:
      case MOUTRES_NATURAL:
      case MOUTRES_SUMMATORIES:
      case MASTF:
      case MASTH:
      case MASTFUNC:
      case PROPERTY:
      case DUMMY:
      case MBOUNDALL:
      case MLOCSET:
      case FVARIANT:
      case FRULE:
      case FP_IN:
      case FP_OUT:
      case PARALLEL:
      case FWEIGHT:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_7;
      }
      sentence();
    }
  }

  final private void moduleDef() throws ParseException {
                            Token moduleNameToken;Token moduleBodyToken;List<String>parameters=new ArrayList<String>();
    jj_consume_token(DEF);
    jj_consume_token(ID);
                  moduleNameToken=token;
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case DOLLAR:
      param(parameters);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        param(parameters);
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
    jj_consume_token(LBRACE);
                 moduleBodyToken=token;
                int counter=1;
                Token t=token,t1;
                do{checkStopped();
                        t1=t;
                        t=getNextToken();
                        if (t.kind==LBRACE) counter ++;
                        if (t.kind==RBRACE) counter --;
                        if (t.kind==EOF)
                        {
                                int expected[][]= new int[1][1];
                                expected[0][0] = RBRACE;
                                {if (true) throw new ParseException(t1,expected,tokenImage);}
                        }
                }while(counter!=0 && t.kind!=EOF);
                addModule(moduleNameToken,moduleBodyToken,parameters);
  }

  final private void parameterValue(List parameterValues) throws ParseException {
                                                     Number n;String str;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOG:
    case COS:
    case SIN:
    case FLOOR:
    case MAX0:
    case CEIL:
    case ROUND:
    case ID:
    case NATURAL_NUMBER:
    case NUMBER:
    case PI:
    case LPAR:
    case PLUS:
    case MINUS:
      n = number();
                   if (!getCurrentEnvironment().isSafeMode())parameterValues.add(n);
      break;
    case STRING:
    case DOLLAR:
      str = string();
                      if (!getCurrentEnvironment().isSafeMode())parameterValues.add(str);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private void moduleCall() throws ParseException {
                             Token callToken;List parameterValues=new ArrayList();
    jj_consume_token(CALL);
    jj_consume_token(ID);
                   callToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOG:
      case COS:
      case SIN:
      case FLOOR:
      case MAX0:
      case CEIL:
      case ROUND:
      case STRING:
      case ID:
      case DOLLAR:
      case NATURAL_NUMBER:
      case NUMBER:
      case PI:
      case LPAR:
      case PLUS:
      case MINUS:
        parameterValue(parameterValues);
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[23] = jj_gen;
            break label_9;
          }
          jj_consume_token(COMMA);
          parameterValue(parameterValues);
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
         if (!getCurrentEnvironment().isSafeMode()) doCall(callToken.image,callToken,parameterValues);
  }

  final private void multiObject(MultiSet<String> ms) throws ParseException {
                                                 String o;Number mul=1;Token beginObjToken,endObjToken;
                beginObjToken=token.next;
    o = object();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MUL:
      jj_consume_token(MUL);
      mul = number0();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
                endObjToken=token;
                try
                {
                        if (!getCurrentEnvironment().isSafeMode())ms.add(o,mul.longValue());
                }catch(Exception ex)
                {
                        throwSemanticsException(ex.getMessage(),beginObjToken,endObjToken);
                }
  }

  final private byte charge() throws ParseException {
                         byte ch=(byte)0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
                 ch=(byte)-1;
      break;
    case PLUS:
      jj_consume_token(PLUS);
                                      ch=(byte)1;
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return ch;}
    throw new Error("Missing return statement in function");
  }

  final private String labelString() throws ParseException {
                                String r="";Number n1=null;Number n2=null;String numberBuffer="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case DOLLAR:
    case STRING_OBJECT:
      r = object();
      break;
    case NATURAL_NUMBER:
      jj_consume_token(NATURAL_NUMBER);
                          r=token.image;
      break;
    case LBRACE:
      jj_consume_token(LBRACE);
      n1 = number();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        n2 = number();
         if (!getCurrentEnvironment().isSafeMode())numberBuffer+=","+n2.toString();
      }
         if (!getCurrentEnvironment().isSafeMode())r=n1.toString()+numberBuffer;
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final private Label label() throws ParseException {
                         String r1=null,r2=null,r3=null;Label l=null;
    jj_consume_token(QUOTE);
    r1 = labelString();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      r2 = labelString();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      jj_consume_token(STRING);
                  r3= token.image.substring(1,token.image.length()-1);
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (r2!=null)
                                l = new Label(r1,r2);
                        else
                                l = new Label(r1);
                        expr=r3;
                }
                {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final private Label parentLabel(ChangeableMembrane parentMembrane) throws ParseException {
                                                                String r1=null,r2=null;Label l=null;Token beginToken,endToken;
    jj_consume_token(QUOTE);
    r1 = labelString();
         beginToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      r2 = labelString();
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
                {endToken=token;}
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (parentMembrane!=null && !parentMembrane.getLabelObj().getEnvironmentID().equals(""))
                        {
                                if (r2!=null && !r2.equals(parentMembrane.getLabelObj().getEnvironmentID()))
                                        throwSemanticsException("Invalid environment ID",beginToken,endToken);
                                r2=parentMembrane.getLabelObj().getEnvironmentID();
                        }
                        if (r2!=null)
                                l = new Label(r1,r2);
                        else
                                l = new Label(r1);
                }
                {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final private Label rsquare() throws ParseException {
                           Label label;
    jj_consume_token(RSQUARE);
    label = label();
                               {if (true) return label;}
    throw new Error("Missing return statement in function");
  }

  final private byte lsquare() throws ParseException {
                          byte ch=(byte)0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIV:
    case OR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        jj_consume_token(OR);
              ruleType="division";
        break;
      case DIV:
        jj_consume_token(DIV);
                                          ruleType="budding";
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      ch = charge();
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    jj_consume_token(LSQUARE);
                                {if (true) return ch;}
    throw new Error("Missing return statement in function");
  }

  final private CellLikeSkinMembrane cellLikeSkinMembrane() throws ParseException {
                                                       CellLikeMembrane m;
    m = cellLikeMembrane(null);
                {if (true) return (CellLikeSkinMembrane)m;}
    throw new Error("Missing return statement in function");
  }

  final private InnerRuleMembrane innerRuleMembrane() throws ParseException {
        byte ch;
        Label label;
        MultiSet<String> ms = new HashMultiSet<String>();
    ch = lsquare();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case DOLLAR:
    case EMPTY:
    case AMPERSAND:
    case STRING_OBJECT:
      rangedMultiSet(ms);
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    label = rsquare();
         {if (true) return getCurrentEnvironment().isSafeMode()?null:new InnerRuleMembrane(label,ch,ms);}
    throw new Error("Missing return statement in function");
  }

  final private OuterRuleMembrane secondRightOuterRuleMembrane(Label label) throws ParseException {
        byte ch;
        List<InnerRuleMembrane> l = new ArrayList<InnerRuleMembrane>();
        MultiSet<String> ms = new HashMultiSet<String>();
        String obj;
        InnerRuleMembrane im;
    ch = lsquare();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case DOLLAR:
    case EMPTY:
    case AMPERSAND:
    case STRING_OBJECT:
      rangedMultiSet(ms);
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSQUARE:
      case PLUS:
      case MINUS:
      case DIV:
      case OR:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_11;
      }
      im = innerRuleMembrane();
                                if (!getCurrentEnvironment().isSafeMode())l.add(im);
    }
    jj_consume_token(RSQUARE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUOTE:
      label = label();
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
         {if (true) return getCurrentEnvironment().isSafeMode()?null:new OuterRuleMembrane(label,ch,ms,l);}
    throw new Error("Missing return statement in function");
  }

  final private OuterRuleMembraneWithDissolutionOption firstRightOuterRuleMembrane(Label label) throws ParseException {
        byte ch;
        List<InnerRuleMembrane> l = new ArrayList<InnerRuleMembrane>();
        MultiSet<String> ms = new HashMultiSet<String>();
        InnerRuleMembrane im;
        boolean dissolves=false;
    ch = lsquare();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISSOLVES:
    case ID:
    case DOLLAR:
    case EMPTY:
    case AMPERSAND:
    case STRING_OBJECT:
      dissolves = rangedMultiSetWithDissolutionOption(ms);
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSQUARE:
      case PLUS:
      case MINUS:
      case DIV:
      case OR:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_12;
      }
      im = innerRuleMembrane();
                                if (!getCurrentEnvironment().isSafeMode())l.add(im);
    }
    jj_consume_token(RSQUARE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUOTE:
      label = label();
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
         {if (true) return getCurrentEnvironment().isSafeMode()?null:new OuterRuleMembraneWithDissolutionOption(label,ch,ms,l,dissolves);}
    throw new Error("Missing return statement in function");
  }

  final private boolean rangedMultiSetWithDissolutionOption(MultiSet < String > ms) throws ParseException {
  boolean dissolves = false;
  Stack<Token > ranges = new Stack<Token >();
  List<Range > rangeList = new LinkedList<Range >();
  Token initToken, endToken;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISSOLVES:
    case ID:
    case DOLLAR:
    case EMPTY:
    case STRING_OBJECT:
      dissolves = multiSetWithDissolutionOption(ms);
    {if (true) return dissolves;}
      break;
    case AMPERSAND:
      jj_consume_token(AMPERSAND);
      jj_consume_token(LBRACE);
      dissolves = multiSetWithDissolutionOption(ms);
      jj_consume_token(RBRACE);
      jj_consume_token(COLON);
    initToken = token;
      jj_consume_token(LBRACE);
      rangeSequence(ranges, rangeList);
      jj_consume_token(RBRACE);
    endToken = token;
        try
        {
                ObjectRangeExpander.expandObject(ms, rangeList, ranges, getCurrentEnvironment(), nonCheckedVariables);
        }
        catch (ObjectRangeException ore)
        {
          throwSemanticsException("Only simple variables allowed in the iterator. \u005cnNot permitted use of parameters based on iterators of this type.",initToken,endToken);
                //throwSemanticsException("Illegal operation. The use of parameters depending on the iteration variable is not allowed. Only the use of the variable itself is permitted!",token,token);
        }
    {if (true) return dissolves;}
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private List<InnerRuleMembrane> innerRuleMembranes() throws ParseException {
        List<InnerRuleMembrane> l = new ArrayList<InnerRuleMembrane>();
        InnerRuleMembrane im;
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSQUARE:
      case PLUS:
      case MINUS:
      case DIV:
      case OR:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_13;
      }
      im = innerRuleMembrane();
                                if (!getCurrentEnvironment().isSafeMode())l.add(im);
    }
         {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final private OuterRuleMembrane outerRuleMembrane() throws ParseException {
        byte ch;
        Label label;
        List<InnerRuleMembrane> l;
        MultiSet<String> ms = new HashMultiSet<String>();
    ch = lsquare();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case DOLLAR:
    case EMPTY:
    case STRING_OBJECT:
      multiSet(ms);
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    l = innerRuleMembranes();
    label = rsquare();
         {if (true) return getCurrentEnvironment().isSafeMode()?null:new OuterRuleMembrane(label,ch,ms,l);}
    throw new Error("Missing return statement in function");
  }

  final private CellLikeMembrane cellLikeMembrane(CellLikeMembrane parentMembrane) throws ParseException {
        Label label;
        byte ch;
        Token initToken,init=null,end=null;
        CellLikeMembrane m=null;
        MultiSet<String> ms = new HashMultiSet<String>();
    ch = lsquare();
                initToken=token;
                int counter=1;
                Token t=token,t1;
                do{checkStopped();
                        t1=t;
                        t=getNextToken();
                        if (t.kind==LSQUARE) counter ++;
                        if (t.kind==RSQUARE) counter --;
                        if (t.kind==EOF || t.kind==SEPARATOR)
                        {
                                int expected[][]= new int[1][1];
                                expected[0][0] = RSQUARE;
                                if (t.kind==SEPARATOR) token=t1;
                                {if (true) throw new ParseException(t1,expected,tokenImage);}
                        }

                }while(counter!=0 && t.kind!=EOF && t.kind!=SEPARATOR);
         init=token;
    label = parentLabel(parentMembrane);
         end=token;
                token=initToken;
                jj_ntk=-1;
                if (!getCurrentEnvironment().isSafeMode())
                {
                        m = CellLikeMembraneFactory.getCellLikeMembrane(label,parentMembrane);
                        m.setCharge(ch);
                        ms=m.getMultiSet();

                        if(parentMembrane == null)      // then is a SkinMembrane
                                ((CellLikeSkinMembrane)m).setPsystem(getPsystem());
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case DOLLAR:
    case EMPTY:
    case STRING_OBJECT:
      multiSet(ms);
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSQUARE:
      case PLUS:
      case MINUS:
      case DIV:
      case OR:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_14;
      }
      cellLikeMembrane(m);
    }
    rsquare();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUOTE:
      label();
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
              if (!getCurrentEnvironment().isSafeMode() && !label.getEnvironmentID().equals(""))
                        addMembrane(label.getLabelID(),label.getEnvironmentID(),m,init,end);

        {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  final private boolean multiSetWithDissolutionOption(MultiSet<String> ms) throws ParseException {
        boolean dissolves=false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISSOLVES:
    case ID:
    case DOLLAR:
    case STRING_OBJECT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
      case DOLLAR:
      case STRING_OBJECT:
        multiObject(ms);
        break;
      case DISSOLVES:
        jj_consume_token(DISSOLVES);
                                      dissolves=true;
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[50] = jj_gen;
          break label_15;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
        case DOLLAR:
        case STRING_OBJECT:
          multiObject(ms);
          break;
        case DISSOLVES:
          jj_consume_token(DISSOLVES);
                                             dissolves=true;
          break;
        default:
          jj_la1[51] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case EMPTY:
      jj_consume_token(EMPTY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        jj_consume_token(DISSOLVES);
                                    dissolves=true;
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return dissolves;}
    throw new Error("Missing return statement in function");
  }

  final private void Set(Set < String > set) throws ParseException {
 String o="";
Token beginObjToken=token.next;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case DOLLAR:
    case STRING_OBJECT:
      o = object();
 set.add(o);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[54] = jj_gen;
          break label_16;
        }
        jj_consume_token(COMMA);
        o = object();
 set.add(o);
      }
      break;
    case EMPTY:
      jj_consume_token(EMPTY);
                Token endObjToken=token;
                try
                {
                        if (!getCurrentEnvironment().isSafeMode())set.add(o);
                }catch(Exception ex)
                {
                        throwSemanticsException(ex.getMessage(),beginObjToken,endObjToken);
                }
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private void rangedSet(Set < String > set) throws ParseException {
  Stack<Token > ranges = new Stack<Token >();
  List<Range > rangeList = new LinkedList<Range >();
  Token initToken, endToken;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AMPERSAND:
      jj_consume_token(AMPERSAND);
      jj_consume_token(LBRACE);
      Set(set);
      jj_consume_token(RBRACE);
      jj_consume_token(COLON);
    initToken = token;
      jj_consume_token(LBRACE);
      rangeSequence(ranges, rangeList);
      jj_consume_token(RBRACE);
    endToken = token;
        try
        {
                ObjectRangeExpander.expandObject(set, rangeList, ranges, getCurrentEnvironment(), nonCheckedVariables);
        }
        catch (ObjectRangeException ore)
        {
          throwSemanticsException("Only simple variables allowed in the iterator. \u005cnNot permitted use of parameters based on iterators of this type.",initToken,endToken);
                //throwSemanticsException("Illegal operation. The use of parameters depending on the iteration variable is not allowed. Only the use of the variable itself is permitted!",token,token);
        }
      break;
    case ID:
    case DOLLAR:
    case EMPTY:
    case STRING_OBJECT:
      Set(set);
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private void rangedMultiSet(MultiSet < String > ms) throws ParseException {
  Stack<Token > ranges = new Stack<Token >();
  List<Range > rangeList = new LinkedList<Range >();
  Token initToken, endToken;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AMPERSAND:
      jj_consume_token(AMPERSAND);
      jj_consume_token(LBRACE);
      multiSet(ms);
      jj_consume_token(RBRACE);
      jj_consume_token(COLON);
    initToken = token;
      jj_consume_token(LBRACE);
      rangeSequence(ranges, rangeList);
      jj_consume_token(RBRACE);
    endToken = token;
        try
        {
                ObjectRangeExpander.expandObject(ms, rangeList, ranges, getCurrentEnvironment(), nonCheckedVariables);
        }
        catch (ObjectRangeException ore)
        {
          throwSemanticsException("Only simple variables allowed in the iterator. \u005cnNot permitted use of parameters based on iterators of this type.",initToken,endToken);
                //throwSemanticsException("Illegal operation. The use of parameters depending on the iteration variable is not allowed. Only the use of the variable itself is permitted!",token,token);
        }
      break;
    case ID:
    case DOLLAR:
    case EMPTY:
    case STRING_OBJECT:
      multiSet(ms);
      break;
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private void multiSet(MultiSet<String> ms) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case DOLLAR:
    case STRING_OBJECT:
      multiObject(ms);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[58] = jj_gen;
          break label_17;
        }
        jj_consume_token(COMMA);
        multiObject(ms);
      }
                if(isSpikingPsystem())
                {
                        if(ms.entrySet().size() > 1)
                                throwSemanticsException("Only one kind of objects are allowed",token,token);

                        if(ms.entrySet().size() == 1)
                                if(!(ms.entrySet().contains(SpikingConstants.spikeSymbol) || ms.entrySet().contains(SpikingConstants.antiSpikeSymbol)))
                                        throwSemanticsException("Only spikes or anti-spikes are allowed",token,token);
                }
      break;
    case EMPTY:
      jj_consume_token(EMPTY);
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private void multiSetAsig() throws ParseException {
                               MultiSet ms=new HashMultiSet<String>();boolean inc=false;String label="";String id=null;Token init=null,end=null;
    jj_consume_token(MULTISET);
    jj_consume_token(LPAR);
                         init=token;
    label = labelString();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      id = labelString();
      break;
    default:
      jj_la1[60] = jj_gen;
      ;
    }
                                                                                    end=token;
    jj_consume_token(RPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INC:
      jj_consume_token(INC);
                                                                                                             inc=true;
      break;
    case ASIG:
      jj_consume_token(ASIG);
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    multiSet(ms);
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (id==null)
                        {
                                if (!inc || !getPsystem().getInitialMultiSets().containsKey(label))
                                        getPsystem().getInitialMultiSets().put(label,ms);
                                else
                                {
                                        MultiSet ms1=getPsystem().getInitialMultiSets().get(label);
                                        ms1.addAll(ms);
                                }
                        }
                        else
                        {
                                addMultiSet(label,id,ms,inc,init,end);
                        }
                }
  }

  final private void labelsList() throws ParseException {
                             String label;
    label = labelString();
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isSpikingPsystem() && !isFuzzyPsystem() && !isTissuePsystem())
                                throwSemanticsException("Invalid initial configuration",token,token);
                        else
                        {
                                if(isSpikingPsystem())
                                {
                                        SpikingMembrane.buildMembrane
                                        (label,0L,(SpikingMembraneStructure)getPsystem().getMembraneStructure(),computeEfficiencyAttributes);
                                }
                                else if(isFuzzyPsystem())
                                {
                                        List<Float> value = new ArrayList<Float>();
                                        FuzzyMembraneStructure struct = (FuzzyMembraneStructure)getPsystem().getMembraneStructure();

                                        if(isRealFuzzyValue())
                                        {
                                                value.add(0.0f);

                                                PropositionNeuron.buildMembrane
                                                (label,value,struct);

                                        }
                                        else if(isTrapezoidalFuzzyValue())
                                        {

                                                for(int i = 0; i < 4; i++)
                                                        value.add(0.0f);

                                                PropositionNeuron.buildMembrane
                                                (label,value,struct);

                                        }
                                        else
                                                throwSemanticsException("Fuzzy value type not initialized",token,token);
                                }
                                else if(isTissuePsystem())
                                {
                                        TissueLikeMembrane.buildMembrane
                                        (label,(TissueLikeMembraneStructure)getPsystem().getMembraneStructure());
                                }
                        }
                }
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[62] = jj_gen;
        break label_18;
      }
      jj_consume_token(COMMA);
      label = labelString();
                        if (!getCurrentEnvironment().isSafeMode())
                        {
                                if (!isSpikingPsystem() && !isFuzzyPsystem())
                                        throwSemanticsException("Invalid initial configuration",token,token);
                                else
                                {
                                        if(isSpikingPsystem())
                                        {
                                                SpikingMembrane.buildMembrane
                                                (label,0L,(SpikingMembraneStructure)getPsystem().getMembraneStructure(),computeEfficiencyAttributes);
                                        }
                                        else if(isFuzzyPsystem())
                                        {
                                                List<Float> value = new ArrayList<Float>();
                                                FuzzyMembraneStructure struct = (FuzzyMembraneStructure)getPsystem().getMembraneStructure();

                                                if(isRealFuzzyValue())
                                                {

                                                        value.add(0.0f);

                                                        PropositionNeuron.buildMembrane
                                                        (label,value,struct);

                                                }
                                                else if(isTrapezoidalFuzzyValue())
                                                {

                                                        for(int i = 0; i < 4; i++)
                                                                value.add(0.0f);

                                                        PropositionNeuron.buildMembrane
                                                        (label,value,struct);

                                                }
                                                else
                                                        throwSemanticsException("Fuzzy value type not initialized",token,token);
                                        }
                                }
                        }
    }
  }

  final private void mout() throws ParseException {
    jj_consume_token(MEMB_OUT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIG:
      jj_consume_token(ASIG);
      break;
    case INC:
      jj_consume_token(INC);
      break;
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case DOLLAR:
    case NATURAL_NUMBER:
    case LBRACE:
    case STRING_OBJECT:
      mout_element();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[64] = jj_gen;
          break label_19;
        }
        jj_consume_token(COMMA);
        mout_element();
      }
      break;
    default:
      jj_la1[65] = jj_gen;
      ;
    }
  }

  final private void mout_element() throws ParseException {
                               String l;
    l = labelString();
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isSpikingPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {
                                        boolean result = ((SpikingMembraneStructure)getPsystem().getMembraneStructure()).setOutputMembrane(l,false);
                                        writeInfo("Setting output membrane: "+l,4);

                                        if(!result)
                                                {if (true) throw new Exception("Impossible to set the neuron as output - maybe is it an ouput neuron already?");}

                                }
                                catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private void min() throws ParseException {
                      String l;
    jj_consume_token(MEMB_IN);
    jj_consume_token(ASIG);
    l = labelString();
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isSpikingPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {
                                        ((SpikingMembraneStructure)getPsystem().getMembraneStructure()).setInputMembrane(l,false);
                                        writeInfo("Setting input membrane: "+l,4);
                                        writeInfo("The input sequence needs to be re-defined now",4);
                                }
                                catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private void mdict() throws ParseException {
    jj_consume_token(MDICT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIG:
      jj_consume_token(ASIG);
      break;
    case INC:
      jj_consume_token(INC);
      break;
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    mdict_body();
  }

  final private void mdict_body() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESS_THAN:
      mobject_list();
      break;
    default:
      jj_la1[67] = jj_gen;
      mdict_list();
    }
  }

  final private void mdict_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      mdict_element();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[68] = jj_gen;
          break label_20;
        }
        jj_consume_token(COMMA);
        mdict_element();
      }
      break;
    default:
      jj_la1[69] = jj_gen;
      ;
    }
  }

  final private void mdict_element() throws ParseException {
                                String l1,l2;
    jj_consume_token(LPAR);
    l1 = labelString();
    jj_consume_token(COMMA);
    l2 = labelString();
    jj_consume_token(RPAR);
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isSpikingPsystem()&&!isSimpleRegenerativePsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                        if(isSpikingPsystem()){
                                try
                                {
                                ((SpikingMembraneStructure)getPsystem().getMembraneStructure()).updateDictionary(l1,l2);
                                writeInfo("Updating dictionary: ("+l1+", "+l2+")",4);
                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                        if(isSimpleRegenerativePsystem()){
                                updateRegenerativeDictionary(l1, l2, token);
                        }
                        }
                }
  }

  final private void mobject_list() throws ParseException {
    mdict_object();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[70] = jj_gen;
        break label_21;
      }
      jj_consume_token(COMMA);
      mdict_object();
    }
  }

  final private void mdict_object() throws ParseException {
                             String l1,l2;
    jj_consume_token(LESS_THAN);
    l1 = object();
    jj_consume_token(COMMA);
    l2 = object();
    jj_consume_token(GREATER_THAN);
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isNonSimpleRegenerativePsystem())
                        {
                                throwSemanticsException("Link dictionaries only valid for Non-Simple Regenerative P systems",token,token);
                        }
                        else
                        {
                                updateRegenerativeDictionary(l1, l2, token);
                        }
                }
  }

  final private void minst() throws ParseException {
    jj_consume_token(MINST);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIG:
      jj_consume_token(ASIG);
      break;
    case INC:
      jj_consume_token(INC);
      break;
    default:
      jj_la1[71] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      minst_element();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[72] = jj_gen;
          break label_22;
        }
        jj_consume_token(COMMA);
        minst_element();
      }
      break;
    default:
      jj_la1[73] = jj_gen;
      ;
    }
  }

  final private void minst_element() throws ParseException {
                                Number a,b;
    jj_consume_token(LPAR);
    a = number();
    jj_consume_token(COMMA);
    b = number();
    jj_consume_token(RPAR);
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isSpikingPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {

                                if( ( (double) a.longValue() ) != a.doubleValue())
                                        {if (true) throw new Exception("time parameter must can be cast to long");}

                                if( ( (double) b.longValue() ) != b.doubleValue())
                                        {if (true) throw new Exception("spikes parameter must can be cast to long");}

                                if(a.longValue() < 1L)
                                        {if (true) throw new Exception("time parameter must be greater or equal than one");}

                                if(b.longValue() < 0L)
                                        {if (true) throw new Exception("time parameter must be greater or equal than zero");}

                                ((SpikingMembraneStructure)getPsystem().getMembraneStructure()).
                                        getEnvironmentMembrane().getInputSequence().put(a.longValue(),b.longValue());
                                writeInfo("Updating input sequence: ("+a.longValue()+", "+b.longValue()+")",4);
                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private void mseq() throws ParseException {
                       Number a;
    jj_consume_token(MSEQ);
    jj_consume_token(ASIG);
    a = number();
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isSpikingPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {

                                if( ( (double) a.longValue() ) != a.doubleValue())
                                        {if (true) throw new Exception("Sequential Mode must can be cast to int");}

                                if(a.longValue() < 0L || a.longValue() > 5L)
                                        {if (true) throw new Exception("Sequential Mode must be in [0,1,2,3,4,5]");}

                                ((SpikingMembraneStructure)getPsystem().getMembraneStructure()).
                                        setSequentialMode((int) a.longValue());
                                writeInfo("Updating Sequential Mode: ("+a.longValue()+")",4);
                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private void masynch() throws ParseException {
                          Number a;
    jj_consume_token(MASYNCH);
    jj_consume_token(ASIG);
    a = number();
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isSpikingPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {

                                if( ( (double) a.longValue() ) != a.doubleValue())
                                        {if (true) throw new Exception("Asynch Mode must can be cast to int");}

                                if(a.longValue() < 0L || a.longValue() > 3L)
                                        {if (true) throw new Exception("Asynch Mode must be in [0,1,2,3]");}

                                ((SpikingMembraneStructure)getPsystem().getMembraneStructure()).
                                        setAsynchMode((int) a.longValue());
                                writeInfo("Updating Asynch Mode: ("+a.longValue()+")",4);
                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private void mvalid() throws ParseException {
    jj_consume_token(MVALID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIG:
      jj_consume_token(ASIG);
      break;
    case INC:
      jj_consume_token(INC);
      break;
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      mvalid_element();
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[75] = jj_gen;
          break label_23;
        }
        jj_consume_token(COMMA);
        mvalid_element();
      }
      break;
    default:
      jj_la1[76] = jj_gen;
      ;
    }
  }

  final private void mvalid_element() throws ParseException {
                                 String l;Number n;
    jj_consume_token(LPAR);
    l = labelString();
    jj_consume_token(COMMA);
    n = number();
    jj_consume_token(RPAR);
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isSpikingPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {

                                if( ( (double) n.longValue() ) != n.doubleValue())
                                        {if (true) throw new Exception("Valid value must can be casted to int");}

                                if(n.longValue() < 0L)
                                        {if (true) throw new Exception("Valid Configuration Value must greater or equal than zero");}

                                ((SpikingMembraneStructure)getPsystem().getMembraneStructure()).
                                        updateValidConfiguration(l,n.longValue());
                                writeInfo("Updating Valid Configuration: ("+l+", "+n.longValue()+")",4);
                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private void marcs() throws ParseException {
    jj_consume_token(MARCS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIG:
      jj_consume_token(ASIG);
      break;
    case INC:
      jj_consume_token(INC);
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      marcs_element();
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[78] = jj_gen;
          break label_24;
        }
        jj_consume_token(COMMA);
        marcs_element();
      }
      break;
    default:
      jj_la1[79] = jj_gen;
      ;
    }
  }

  final private void marcs_element() throws ParseException {
                                String l1,l2;
    jj_consume_token(LPAR);
    l1 = labelString();
    jj_consume_token(COMMA);
    l2 = labelString();
    jj_consume_token(RPAR);
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isSpikingPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {
                                boolean result = ((SpikingMembraneStructure)getPsystem().getMembraneStructure()).connect(l1,l2);
                                writeInfo("Connecting arcs: ("+l1+", "+l2+")",4);
                                if(!result)
                                {if (true) throw new Exception("Impossible to create the arc - maybe the arc exists already?");}
                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private String func_head() throws ParseException {
                              String functionName;List<String>parameters=new ArrayList<String>();String result=new String();
    jj_consume_token(ID);
             functionName=token.image;
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case DOLLAR:
      param(parameters);
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[80] = jj_gen;
          break label_25;
        }
        jj_consume_token(COMMA);
        param(parameters);
      }
      break;
    default:
      jj_la1[81] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isSpikingPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {

                                int size = parameters.size();

                                int i = 0;

                                String varList = "";

                                while(i < size)
                                {checkStopped();
                                        String var = parameters.get(i).toLowerCase();

                                        int aux = i+1;
                                        String comp = new String("x" + aux);

                                        if(!var.equals(comp))
                                                throwSemanticsException("Incorrect variable specification",token,token);

                                        varList += var;

                                        i++;

                                        if(i < size)
                                                varList += ",";

                                }


                                result = functionName + "(" + varList + ")";

                                writeInfo("Reading function name: " + result + "...",4);

                                {if (true) return result;}

                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }

                        {if (true) return result;}
                }

                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final private String func_body() throws ParseException {
                              String aux; String result=new String();
    aux = string0();
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isSpikingPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                result = aux.toLowerCase();

                                {if (true) return result;}

                        }

                        {if (true) return result;}
                }

                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final private void mastfunc() throws ParseException {
                           String name; String body;
    jj_consume_token(MASTFUNC);
    jj_consume_token(ASIG);
    jj_consume_token(LPAR);
    name = func_head();
    jj_consume_token(COMMA);
    body = func_body();
    jj_consume_token(RPAR);
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isSpikingPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {

                                SpikingMembraneStructure structure = (SpikingMembraneStructure)getPsystem().getMembraneStructure();

                                if(!body.startsWith(name))
                                        {if (true) throw new Exception("the definition of the function must start with the head specified.");}

                                structure.addAstrocyteFunction(name,body,name.split(",").length);

                                writeInfo("Adding astrocyte function...",4);

                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private void mast_functional() throws ParseException {
String label;
List<Pair<String,String>> lista = new ArrayList<Pair<String,String>>();
List<Pair<String,String>> listaCtrl = new ArrayList<Pair<String,String>>();
SortedSet<Long> listaTh = new TreeSet<Long>();
List<String> listaFunc = new ArrayList<String>();
Number t;
String r,s; boolean update,cOpFlag;
    jj_consume_token(MASTF);
    jj_consume_token(ASIG);
    jj_consume_token(LPAR);
    label = labelString();
    jj_consume_token(COMMA);
    list_arcs(lista);
    jj_consume_token(COMMA);
    list_arcs(listaCtrl);
    jj_consume_token(COMMA);
    r = labelString();
    jj_consume_token(COMMA);
                                cOpFlag = false;

                                try
                                {

                                if(r.toLowerCase().equals("true") == true)
                                        cOpFlag = true;
                                else if (r.toLowerCase().equals("false") == true)
                                        cOpFlag = false;
                                else
                                        {if (true) throw new Exception("The update potential parameter must be boolean");}

                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
    list_thresholds(listaTh);
    jj_consume_token(COMMA);
    list_functions(listaFunc,lista.size(),cOpFlag);
    jj_consume_token(COMMA);
    t = number();
    jj_consume_token(COMMA);
    s = labelString();
    jj_consume_token(RPAR);
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isSpikingPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {

                                if( ( (double) t.longValue() ) != t.doubleValue())
                                        {if (true) throw new Exception("t must can be cast to long");}

                                if(t.longValue() < 0L)
                                        {if (true) throw new Exception("t must be a natural number");}

                                if(s.toLowerCase().equals("true") == true)
                                        update = true;
                                else if (s.toLowerCase().equals("false") == true)
                                        update = false;
                                else
                                        {if (true) throw new Exception("The update potential parameter must be boolean");}

                                SpikingMembraneStructure structure = (SpikingMembraneStructure)getPsystem().getMembraneStructure();

                                if(existsBuddingOrDivisionRules)
                                        {if (true) throw new Exception("Can't add a Functional Astrocyte in presence of budding or division rules.");}
                                else
                                        existsFunctionalAstrocytes = true;

                                Astrocyte ast = new FunctionalAstrocyte(label,lista,listaCtrl,cOpFlag,listaTh,listaFunc,t.longValue(),update,structure);

                                writeInfo("Adding astrocyte...",4);

                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private void mast_hybrid() throws ParseException {
                              String label; List<Pair<String,String>> lista = new ArrayList<Pair<String,String>>(); Number t;
    jj_consume_token(MASTH);
    jj_consume_token(ASIG);
    jj_consume_token(LPAR);
    label = labelString();
    jj_consume_token(COMMA);
    list_arcs(lista);
    jj_consume_token(COMMA);
    t = number();
    jj_consume_token(RPAR);
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isSpikingPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {


                                if( ( (double) t.longValue() ) != t.doubleValue())
                                        {if (true) throw new Exception("t must can be cast to long");}

                                if(t.longValue() < 0L)
                                        {if (true) throw new Exception("t must be a natural number");}

                                SpikingMembraneStructure structure = (SpikingMembraneStructure)getPsystem().getMembraneStructure();

                                Astrocyte ast = new HybridAstrocyte(label,lista,t.longValue(),structure);

                                writeInfo("Adding astrocyte...",4);

                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private void list_arcs(List<Pair<String,String>> list) throws ParseException {
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      list_arcs_element(list);
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[82] = jj_gen;
          break label_26;
        }
        jj_consume_token(COMMA);
        list_arcs_element(list);
      }
      break;
    default:
      jj_la1[83] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
  }

  final private void list_arcs_element(List<Pair<String,String>> list) throws ParseException {
                                                                  String l1,l2; Pair<String,String> p;
    jj_consume_token(LPAR);
    l1 = labelString();
    jj_consume_token(COMMA);
    l2 = labelString();
    jj_consume_token(RPAR);
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isSpikingPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {
                                p = new Pair<String,String>(l1,l2);
                                list.add(p);
                                writeInfo("Building arc: ("+l1+", "+l2+")",4);
                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private void list_thresholds(SortedSet<Long> list) throws ParseException {
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOG:
    case COS:
    case SIN:
    case FLOOR:
    case MAX0:
    case CEIL:
    case ROUND:
    case ID:
    case NATURAL_NUMBER:
    case NUMBER:
    case PI:
    case LPAR:
    case PLUS:
    case MINUS:
      list_thresholds_element(list);
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[84] = jj_gen;
          break label_27;
        }
        jj_consume_token(COMMA);
        list_thresholds_element(list);
      }
      break;
    default:
      jj_la1[85] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
  }

  final private void list_thresholds_element(SortedSet<Long> list) throws ParseException {
                                                              Number t;
    t = number();
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isSpikingPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {

                                if( ( (double) t.longValue() ) != t.doubleValue())
                                        {if (true) throw new Exception("t must can be cast to long");}

                                if(t.longValue() < 0L)
                                        {if (true) throw new Exception("t must be a natural number");}

                                if(!list.isEmpty() && t.longValue() <= list.last())
                                        {if (true) throw new Exception("An ordered set of thresholds is required.");}

                                writeInfo("Adding threshold...",4);

                                list.add(t.longValue());

                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private void list_functions(List<String> list, int size, boolean cOpFlag) throws ParseException {
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      list_functions_element(list,size,cOpFlag);
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[86] = jj_gen;
          break label_28;
        }
        jj_consume_token(COMMA);
        list_functions_element(list,size,cOpFlag);
      }
      break;
    default:
      jj_la1[87] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
  }

  final private void list_functions_element(List<String> list, int size, boolean cOpFlag) throws ParseException {
                                                                                     String fName;
    fName = func_head();
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isSpikingPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {

                                int numParams = fName.split(",").length;

                                if(!fName.equals("pol()") && !fName.equals("sub()"))
                                {

                                        if(cOpFlag == true && numParams != 1)
                                                {if (true) throw new Exception("Number of function params must be equal to 1 in this case");}
                                        else if(cOpFlag == false && size == 1 && numParams != 1)
                                                {if (true) throw new Exception("Number of function params must be equal to 1 in this case");}
                                        else if (cOpFlag == false && size > 1 && numParams != size - 1)
                                                {if (true) throw new Exception("Number of function params must be equal to arcs number");}

                                }

                                writeInfo("Adding function...",4);

                                list.add(fName);

                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private void moutres_binary() throws ParseException {
    jj_consume_token(MOUTRES_BINARY);
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isSpikingPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {
                                ((SpikingMembraneStructure)getPsystem().getMembraneStructure()).
                                        setShowBinarySequence(true);
                                writeInfo("Setting Binary Sequence to be shown... ",4);
                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private void moutres_summatories() throws ParseException {
    jj_consume_token(MOUTRES_SUMMATORIES);
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isSpikingPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {
                                ((SpikingMembraneStructure)getPsystem().getMembraneStructure()).
                                        setShowSummatories(true);
                                writeInfo("Setting Summatories to be shown... ",4);
                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private void moutres_natural() throws ParseException {
                                  Number n; String s1,s2;boolean b1,b2;ArrayList array;
    jj_consume_token(MOUTRES_NATURAL);
    jj_consume_token(LPAR);
    n = number();
    jj_consume_token(COMMA);
    s1 = labelString();
    jj_consume_token(COMMA);
    s2 = labelString();
    jj_consume_token(RPAR);
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isSpikingPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {

                                if( ( (double) n.longValue() ) != n.doubleValue())
                                        {if (true) throw new Exception("k must can be cast to long");}

                                if(n.longValue() < 2L)
                                        {if (true) throw new Exception("k must be greater or equal to two");}

                                if(s1.toLowerCase().equals("true") == true)
                                        b1 = true;
                                else if (s1.toLowerCase().equals("false") == true)
                                        b1 = false;
                                else
                                        {if (true) throw new Exception("The strong parameter must be boolean");}

                                if(s2.toLowerCase().equals("true") == true)
                                        b2 = true;
                                else if (s2.toLowerCase().equals("false") == true)
                                        b2 = false;
                                else
                                        {if (true) throw new Exception("The alternate parameter must be boolean");}


                                array = new ArrayList();
                                array.add(n.longValue());
                                array.add(b1);
                                array.add(b2);

                                ((SpikingMembraneStructure)getPsystem().getMembraneStructure()).
                                        setShowNaturalSequence(array);
                                writeInfo("Setting Natural Sequence to be shown...",4);

                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private void mboundall() throws ParseException {
                            Number a;
    jj_consume_token(MBOUNDALL);
    jj_consume_token(ASIG);
    a = number();
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isSpikingPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {

                                if( ( (double) a.longValue() ) != a.doubleValue())
                                        {if (true) throw new Exception("Bound must can be cast to long");}

                                if(a.longValue() < 2L )
                                        {if (true) throw new Exception("Bound must be greater or equal than 2");}

                                ((SpikingMembraneStructure)getPsystem().getMembraneStructure()).
                                        setBound((long) a.longValue());

                                writeInfo("Updating Bound: ("+a.longValue()+")",4);
                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private void mlocset() throws ParseException {
                          Set<Set<String>> set = new HashSet<Set<String>>();
    jj_consume_token(MLOCSET);
    jj_consume_token(ASIG);
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      loc_set_element(set);
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[88] = jj_gen;
          break label_29;
        }
        jj_consume_token(COMMA);
        loc_set_element(set);
      }
      break;
    default:
      jj_la1[89] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isSpikingPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {

                                SpikingMembraneStructure structure = (SpikingMembraneStructure)getPsystem().getMembraneStructure();

                                writeInfo("Adding Loc set...",4);

                                structure.setLocAttributesFromSet(set);
                                structure.setAsynchMode(4);

                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private void loc_set_element(Set<Set<String>> set) throws ParseException {
                                                      Set<String> elementSet = new HashSet<String>();
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case DOLLAR:
    case NATURAL_NUMBER:
    case LBRACE:
    case STRING_OBJECT:
      loc_set_sub_element(elementSet);
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[90] = jj_gen;
          break label_30;
        }
        jj_consume_token(COMMA);
        loc_set_sub_element(elementSet);
      }
      break;
    default:
      jj_la1[91] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isSpikingPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {
                                        writeInfo("Adding Loc subset...",4);

                                        set.add(elementSet);

                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private void loc_set_sub_element(Set<String> set) throws ParseException {
                                                     String label;
    label = labelString();
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isSpikingPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {

                                SpikingMembraneStructure structure = (SpikingMembraneStructure)getPsystem().getMembraneStructure();

                                if(structure.getCellsByLabel(label).isEmpty())
                                        {if (true) throw new Exception("Membrane label not defined in P system");}

                                writeInfo("Adding element to Loc subset...",4);

                                set.add(label);

                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private void fvariant() throws ParseException {
                           Number a;
    jj_consume_token(FVARIANT);
    jj_consume_token(ASIG);
    a = number();
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isFuzzyPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {

                                if( ( (double) a.longValue() ) != a.doubleValue())
                                        {if (true) throw new Exception("Fuzzy Variant must can be cast to int");}

                                if(a.longValue() < 0L || a.longValue() > 2L)
                                        {if (true) throw new Exception("Fuzzy Variant must be in [0,1,2]");}

                                ((FuzzyPsystem)getPsystem()).
                                        setSystemType((int) a.longValue());
                                writeInfo("Updating Fuzzy Variant: ("+a.longValue()+")",4);
                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private void fp_in() throws ParseException {
    jj_consume_token(FP_IN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIG:
      jj_consume_token(ASIG);
      break;
    case INC:
      jj_consume_token(INC);
      break;
    default:
      jj_la1[92] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    fp_in_element();
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[93] = jj_gen;
        break label_31;
      }
      jj_consume_token(COMMA);
      fp_in_element();
    }
  }

  final private void fp_in_element() throws ParseException {
                                String l; List<Float> v;
    jj_consume_token(LPAR);
    l = labelString();
    jj_consume_token(COMMA);
    v = fuzzy_value();
    jj_consume_token(RPAR);
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isFuzzyPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {
                                        ((FuzzyMembraneStructure)getPsystem().getMembraneStructure()).setInputMembrane(l,v,false);
                                        writeInfo("Setting input membrane: "+l,4);

                                }
                                catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private void fp_out() throws ParseException {
    jj_consume_token(FP_OUT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIG:
      jj_consume_token(ASIG);
      break;
    case INC:
      jj_consume_token(INC);
      break;
    default:
      jj_la1[94] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case DOLLAR:
    case NATURAL_NUMBER:
    case LBRACE:
    case STRING_OBJECT:
      fp_out_element();
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[95] = jj_gen;
          break label_32;
        }
        jj_consume_token(COMMA);
        fp_out_element();
      }
      break;
    default:
      jj_la1[96] = jj_gen;
      ;
    }
  }

  final private void fp_out_element() throws ParseException {
                                 String l;
    l = labelString();
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isFuzzyPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {
                                        ((FuzzyMembraneStructure)getPsystem().getMembraneStructure()).setOutputMembrane(l,false);
                                        writeInfo("Setting output membrane: "+l,4);

                                }
                                catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private List<Float> fuzzy_value() throws ParseException {
                                      List<Float> value = new ArrayList<Float>(); Number n1,n2,n3,n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOG:
    case COS:
    case SIN:
    case FLOOR:
    case MAX0:
    case CEIL:
    case ROUND:
    case ID:
    case NATURAL_NUMBER:
    case NUMBER:
    case PI:
    case LPAR:
    case PLUS:
    case MINUS:
      n1 = number();
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isFuzzyPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else if(!isRealFuzzyValue())
                                throwSemanticsException("NOT a fuzzy system with REAL numbers",token,token);
                        else
                        {
                                try
                                {

                                if(n1.floatValue() < 0.0 || n1.floatValue() > 1.0)
                                        {if (true) throw new Exception("real number must be in [0,1]");}

                                value.add(n1.floatValue());

                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }

                {if (true) return value;}
      break;
    case LSQUARE:
      jj_consume_token(LSQUARE);
      n1 = number();
      jj_consume_token(COMMA);
      n2 = number();
      jj_consume_token(COMMA);
      n3 = number();
      jj_consume_token(COMMA);
      n4 = number();
      jj_consume_token(RSQUARE);
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isFuzzyPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else if(!isTrapezoidalFuzzyValue())
                                throwSemanticsException("NOT a fuzzy system with TRAPEZOIDAL numbers",token,token);
                        else
                        {
                                try
                                {

                                if(n1.floatValue() < 0.0 || n1.floatValue() > 1.0)
                                        {if (true) throw new Exception("trapezoidal component must be a real number in [0,1]");}

                                if(n2.floatValue() < 0.0 || n2.floatValue() > 1.0)
                                        {if (true) throw new Exception("trapezoidal component must be a real number in [0,1]");}

                                if(n3.floatValue() < 0.0 || n3.floatValue() > 1.0)
                                        {if (true) throw new Exception("trapezoidal component must be a real number in [0,1]");}

                                if(n4.floatValue() < 0.0 || n4.floatValue() > 1.0)
                                        {if (true) throw new Exception("trapezoidal component must be a real number in [0,1]");}

                                value.add(n1.floatValue());
                                value.add(n2.floatValue());
                                value.add(n3.floatValue());
                                value.add(n4.floatValue());

                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }

                {if (true) return value;}
      break;
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private void frule() throws ParseException {
                         int caseRule = -1; String label,s1 = null, s2 = null ; List<Integer> list1 = new ArrayList<Integer>(); List<Integer> list2 = new ArrayList<Integer>(); List<Float> value;
    jj_consume_token(FRULE);
    jj_consume_token(LPAR);
    label = labelString();
    jj_consume_token(COMMA);
    value = fuzzy_value();
    jj_consume_token(COMMA);
    if (jj_2_1(3)) {
      s1 = labelString();
      jj_consume_token(COMMA);
      s2 = labelString();
                                                                                                          caseRule = 0;
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FAND:
        jj_consume_token(FAND);
        jj_consume_token(LPAR);
        fuzzy_hand(list1);
        jj_consume_token(RPAR);
        jj_consume_token(COMMA);
        s2 = labelString();
                                                                                          caseRule = 1;
        break;
      case ID:
      case DOLLAR:
      case NATURAL_NUMBER:
      case LBRACE:
      case STRING_OBJECT:
        s1 = labelString();
        jj_consume_token(COMMA);
        jj_consume_token(LPAR);
        fuzzy_hand(list2);
        jj_consume_token(RPAR);
                                                                                                  caseRule = 2;
        break;
      case FOR:
        jj_consume_token(FOR);
        jj_consume_token(LPAR);
        fuzzy_hand(list1);
        jj_consume_token(RPAR);
        jj_consume_token(COMMA);
        s2 = labelString();
                                                                                  caseRule = 3;
        break;
      default:
        jj_la1[98] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RPAR);
        if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isFuzzyPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {

                                if(caseRule < 0)
                                        {if (true) throw new Exception("not a valid rule");}

                                FuzzyMembraneStructure struct = (FuzzyMembraneStructure) getPsystem().getMembraneStructure();

                                if(caseRule == 0)
                                {
                                        List<FuzzyMembrane> flist1 =  struct.getCellsByLabel(s1);

                                        if(flist1.size() != 1 || !(flist1.get(0) instanceof PropositionNeuron))
                                                {if (true) throw new Exception("Left part of the rule is not a Proposition Neuron");}

                                        List<FuzzyMembrane> flist2 =  struct.getCellsByLabel(s2);

                                        if(flist2.size() != 1 || !(flist2.get(0) instanceof PropositionNeuron))
                                                {if (true) throw new Exception("Right part of the rule is not a Proposition Neuron");}

                                        int id1 = ((FuzzyMembrane) flist1.get(0)).getId();

                                        int id2 = ((FuzzyMembrane) flist2.get(0)).getId();

                                        if(id1 == id2)
                                                {if (true) throw new Exception("Left part and right part of the rule cannot be the same Proposition Neuron");}

                                        list1.add(id1);
                                        list2.add(id2);

                                        RuleNeuron.buildMembrane
                                        (label,value,list1,list2,caseRule,struct);

                                        writeInfo("Adding rule: "+label,4);
                                }
                                else if(caseRule == 1 || caseRule == 3)
                                {

                                        // list1 is ready

                                        // gotta check s2

                                        List<FuzzyMembrane> flist2 =  struct.getCellsByLabel(s2);

                                        if(flist2.size() != 1 || !(flist2.get(0) instanceof PropositionNeuron))
                                                {if (true) throw new Exception("Right part of the rule is not a Proposition Neuron");}

                                        int id2 = ((FuzzyMembrane) flist2.get(0)).getId();

                                        if(list1.contains(id2))
                                                {if (true) throw new Exception("Left part and right part of the rule cannot share the same Proposition Neurons");}

                                        list2.add(id2);

                                        RuleNeuron.buildMembrane
                                        (label,value,list1,list2,caseRule,struct);

                                        writeInfo("Adding rule: "+label,4);

                                }
                                else if(caseRule == 2)
                                {
                                        // list2 is ready

                                        // gotta check s1

                                        List<FuzzyMembrane> flist1 =  struct.getCellsByLabel(s1);

                                        if(flist1.size() != 1 || !(flist1.get(0) instanceof PropositionNeuron))
                                                {if (true) throw new Exception("Left part of the rule is not a Proposition Neuron");}

                                        int id1 = ((FuzzyMembrane) flist1.get(0)).getId();

                                        if(list2.contains(id1))
                                                {if (true) throw new Exception("Left part and right part of the rule cannot share the same Proposition Neurons");}

                                        list1.add(id1);

                                        RuleNeuron.buildMembrane
                                        (label,value,list1,list2,caseRule,struct);

                                        writeInfo("Adding rule: "+label,4);

                                }
                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private void fuzzy_hand(List<Integer> list) throws ParseException {
    fuzzy_hand_element(list);
    jj_consume_token(COMMA);
    fuzzy_hand_element(list);
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[99] = jj_gen;
        break label_33;
      }
      jj_consume_token(COMMA);
      fuzzy_hand_element(list);
    }
  }

  final private void fuzzy_hand_element(List<Integer> list) throws ParseException {
                                                       String label;
    label = labelString();
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isFuzzyPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                try
                                {
                                        FuzzyMembraneStructure struct = (FuzzyMembraneStructure) getPsystem().getMembraneStructure();

                                        List<FuzzyMembrane> flist =  struct.getCellsByLabel(label);

                                        if(flist.size() != 1 || !(flist.get(0) instanceof PropositionNeuron))
                                                {if (true) throw new Exception("Neuron must be a Proposition Neuron");}

                                        int id = ((FuzzyMembrane) flist.get(0)).getId();

                                        if(list.contains(id))
                                                {if (true) throw new Exception("repetition of Proposition Neurons is not allowed");}

                                        list.add(id);

                                }catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private void parallel() throws ParseException {
    jj_consume_token(PARALLEL);
        if (!getCurrentEnvironment().isSafeMode())
        {
                        if (!isFuzzyPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                FuzzyMembraneStructure struct = (FuzzyMembraneStructure) getPsystem().getMembraneStructure();
                                struct.setExecuteInParallel(true);
                        }

        }
  }

  final private void fweight() throws ParseException {
                          String left; String right; List<Float> v;
    jj_consume_token(FWEIGHT);
    jj_consume_token(LPAR);
    left = labelString();
    jj_consume_token(COMMA);
    right = labelString();
    jj_consume_token(COMMA);
    v = fuzzy_value();
    jj_consume_token(RPAR);
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (!isFuzzyPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else if (!isWeightedFuzzyPsystem())
                                throwSemanticsException("NOT a WEIGHTED fuzzy SN P system",token,token);
                        else
                        {
                                try
                                {
                                        ((FuzzyMembraneStructure)getPsystem().getMembraneStructure()).addWeight(left,right,v);
                                        writeInfo("Adding weight: "+left+","+right+","+v,4);

                                }
                                catch(Exception ex)
                                {
                                        throwSemanticsException(ex.getMessage(),token,token);
                                }
                        }
                }
  }

  final private void membraneStructureIncrement() throws ParseException {
        Stack<Token>ranges=new Stack<Token>();
   ChangeableMembrane membrane=null;
        Token sentenceToken;
        OuterRuleMembrane orm;
  Token init, end;
  String label=null, id=null;
    jj_consume_token(LPAR);
             init = token;
    label = labelString();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      id = labelString();
      break;
    default:
      jj_la1[100] = jj_gen;
      ;
    }
                     end = token;
    jj_consume_token(RPAR);
                        if(!getCurrentEnvironment().isSafeMode())
                        {
                            Label labelObject;
                            if(id!=null)
                                        labelObject = new Label(label, id);
                                else
                                        labelObject = new Label(label);
                                membrane = EnvironmentAdder.lookForMembrane(getPsystem().getMembraneStructure(),labelObject);
                        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INC:
      jj_consume_token(INC);
    if(!(getPsystem().getMembraneStructure() instanceof CellLikeSkinMembrane))
        throwSemanticsException("+= increment is only allowed for Cell-like structures. For other membrane structures, please use *=");
      cellLikeMembrane((CellLikeMembrane)membrane);
      break;
    case ICL:
      jj_consume_token(ICL);
    if(!(getPsystem().getMembraneStructure() instanceof TissueLikeMembraneStructure))
        throwSemanticsException("*= increment is only allowed for Tissue-like structures. For other membrane structures, please use +=");
      orm = outerRuleMembrane();
          if(!getCurrentEnvironment().isSafeMode())
          {
            TissueLikeMembraneStructure str = (TissueLikeMembraneStructure) getPsystem().getMembraneStructure();

            if (str instanceof SimpleKernelLikeMembraneStructure)
            {

                                SimpleKernelLikeMembraneStructure structure = (SimpleKernelLikeMembraneStructure) str;
                SimpleKernelLikeMembrane kernelMembrane = SimpleKernelLikeMembraneFactory.getKernelLikeMembrane(orm.getLabel(), orm.getMultiSet(), structure);
                if(structure instanceof RegenerativeMembraneStructure)
                {
                   ((RegenerativeMembraneStructure)structure).disableLinkCheck();

                }
                structure.add(kernelMembrane);
                if(structure instanceof RegenerativeMembraneStructure)
                {
                   ((RegenerativeMembraneStructure)structure).enableLinkCheck();

                }
             }
             else
             {
                TissueLikeMembrane tissueMembrane = TissueLikeMembraneFactory.getTissueLikeMembrane(orm.getLabel(), orm.getMultiSet(), str);
               str.add(tissueMembrane);
             }

          }
      break;
    default:
      jj_la1[101] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private void properties() throws ParseException {
 Set<String> propertiedObjects= new HashSet<String>();
String property="";
    jj_consume_token(PROPERTY);
    jj_consume_token(LPAR);
    jj_consume_token(ID);
                          property=token.image;
    jj_consume_token(RPAR);
    jj_consume_token(ASIG);
    rangedSet(propertiedObjects);
    Psystem psystem = getPsystem();

    if (!getCurrentEnvironment().isSafeMode())
      {
    for(String propertiedObject: propertiedObjects)
    {checkStopped();
         psystem.addProperty(propertiedObject, property);
      }
    }
  }

  final private void dummyMode() throws ParseException {
    jj_consume_token(DUMMY);
    jj_consume_token(ASIG);
    jj_consume_token(ID);
   String mode=token.image;
   Psystem psystem = getPsystem();
   if(!isProbabilisticGuardedPsystem())
        throwSemanticsException("Only probabilistic guarded P systems can define flags");
    ProbabilisticGuardedPsystem probabilisticGuardedPsystem = (ProbabilisticGuardedPsystem) psystem;
        probabilisticGuardedPsystem.setDummyMode(mode);
  }

  final private void initConfiguration() throws ParseException {
 CellLikeSkinMembrane m=null;
    jj_consume_token(MU);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      membraneStructureIncrement();
      break;
    case ASIG:
    case INC:
    case ICL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASIG:
        jj_consume_token(ASIG);
        break;
      case INC:
        jj_consume_token(INC);
        break;
      case ICL:
        jj_consume_token(ICL);
        break;
      default:
        jj_la1[102] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSQUARE:
      case PLUS:
      case MINUS:
      case DIV:
      case OR:
        m = cellLikeSkinMembrane();
        break;
      case ID:
      case DOLLAR:
      case NATURAL_NUMBER:
      case LBRACE:
      case STRING_OBJECT:
        labelsList();
        break;
      default:
        jj_la1[103] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                if (!getCurrentEnvironment().isSafeMode() && m!=null)
                {

                        getPsystem().setMembraneStructure(m);
                }
      break;
    default:
      jj_la1[104] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private Number priority() throws ParseException {
        Number n;
    jj_consume_token(LPAR);
    n = number();
    jj_consume_token(RPAR);
         {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final private void rule() throws ParseException {
        MultiSet<String> leftMultiSet=new HashMultiSet<String>();
        MultiSet<String> rightMultiSet=new HashMultiSet<String>();
        MultiSet<String> leftOuterRuleMembraneMultiSet=new HashMultiSet<String>();
        MultiSet<String> rightOuterRuleMembraneMultiSet=new HashMultiSet<String>();
        List<InnerRuleMembrane> leftInner,rightInner;
        String errorCauses="";
        OuterRuleMembraneWithDissolutionOption firstRightOuterRuleMembrane=null;
        List<OuterRuleMembrane > divisionResultingMembranes = new LinkedList<OuterRuleMembrane >();
        OuterRuleMembrane leftOuterRuleMembrane=null,secondRightOuterRuleMembrane=null;
        Number ratio=0,priority=0;
        boolean hasPriority=false,hasRatio=false,hasGuard=false;
        Token beginRuleToken,endRuleToken;
        IRule r=null;
        Guard mainGuard=null;
        byte ch, ruleType=KernelRuleTypes.DIVISION;
        Label label;
        boolean dissolves=false,doubleArrow=false, relabelling=false, linking=false, unlinkingArrow=false;
         beginRuleToken=token.next;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GUARD:
      jj_consume_token(GUARD);
         if(!getPsystem().definesGuards())
                throwSemanticsException("Rules in model "+RuleChecker.getModelName(getPsystem())+" cannot define guards");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AMPERSAND:
      case BAR:
      case LBRACE:
      case LPAR:
        mainGuard = guard();
        break;
      case ID:
      case DOLLAR:
      case STRING_OBJECT:
        mainGuard = restrictiveGuard();
        break;
      default:
        jj_la1[105] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                           hasGuard=true;
      jj_consume_token(QUESTION);
      break;
    default:
      jj_la1[106] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      priority = priority();
                              hasPriority=true;
      break;
    default:
      jj_la1[107] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case DOLLAR:
    case EMPTY:
    case AMPERSAND:
    case STRING_OBJECT:
      rangedMultiSet(leftMultiSet);
      break;
    default:
      jj_la1[108] = jj_gen;
      ;
    }
    ch = lsquare();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case DOLLAR:
    case EMPTY:
    case AMPERSAND:
    case STRING_OBJECT:
      rangedMultiSet(leftOuterRuleMembraneMultiSet);
      break;
    default:
      jj_la1[109] = jj_gen;
      ;
    }
    leftInner = innerRuleMembranes();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RSQUARE:
      label = rsquare();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARROW:
        jj_consume_token(ARROW);
        break;
      case DOUBLE_ARROW:
        jj_consume_token(DOUBLE_ARROW);
                         doubleArrow=true;
        break;
      case UNLINKING_ARROW:
        jj_consume_token(UNLINKING_ARROW);
                              unlinkingArrow=true;
        break;
      case RELABELLING_ARROW:
        jj_consume_token(RELABELLING_ARROW);
                               relabelling=true;
        break;
      default:
        jj_la1[110] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (!getCurrentEnvironment().isSafeMode())firstRightOuterRuleMembrane=new OuterRuleMembraneWithDissolutionOption(label,ch,true);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
      case DOLLAR:
      case EMPTY:
      case AMPERSAND:
      case STRING_OBJECT:
        rangedMultiSet(rightMultiSet);
        break;
      default:
        jj_la1[111] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSQUARE:
      case PLUS:
      case MINUS:
      case DIV:
      case OR:
        firstRightOuterRuleMembrane = firstRightOuterRuleMembrane(label);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AMPERSAND:
        case LSQUARE:
        case PLUS:
        case MINUS:
        case DIV:
        case OR:
          secondRightOuterRuleMembrane = rangedMembraneList(label, divisionResultingMembranes);
          break;
        default:
          jj_la1[112] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
        case DOLLAR:
        case EMPTY:
        case AMPERSAND:
        case STRING_OBJECT:
          rangedMultiSet(rightMultiSet);
          break;
        default:
          jj_la1[113] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[114] = jj_gen;
        ;
      }
      break;
    case ARROW:
      jj_consume_token(ARROW);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DISSOLVES:
      case ID:
      case DOLLAR:
      case EMPTY:
      case AMPERSAND:
      case STRING_OBJECT:
        dissolves = rangedMultiSetWithDissolutionOption(rightOuterRuleMembraneMultiSet);
        break;
      default:
        jj_la1[115] = jj_gen;
        ;
      }
      rightInner = innerRuleMembranes();
      label = rsquare();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEBUG:
        jj_consume_token(DEBUG);
        string();
        break;
      default:
        jj_la1[116] = jj_gen;
        ;
      }
 if (!getCurrentEnvironment().isSafeMode())firstRightOuterRuleMembrane=new OuterRuleMembraneWithDissolutionOption(label,ch,rightOuterRuleMembraneMultiSet,rightInner,dissolves);
      break;
    default:
      jj_la1[117] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLE_COLON:
      jj_consume_token(DOUBLE_COLON);
      ratio = number();
                                      hasRatio=true;
      break;
    default:
      jj_la1[118] = jj_gen;
      ;
    }
                if (!getCurrentEnvironment().isSafeMode())
                {
                        endRuleToken=token;
                        leftOuterRuleMembrane=new OuterRuleMembrane(label,ch,leftOuterRuleMembraneMultiSet,leftInner);
                        LeftHandRule leftHandRule;
                        RightHandRule rightHandRule;
                        if (hasPriority && hasRatio)
                                throwSemanticsException("A rule cannot define a ratio and a priority at once",beginRuleToken,endRuleToken);
                        leftHandRule = new LeftHandRule(leftOuterRuleMembrane,leftMultiSet);
                        if (divisionResultingMembranes.isEmpty())
                                rightHandRule = new RightHandRule(firstRightOuterRuleMembrane,rightMultiSet);
                        else
                                if(isKernelPsystem())
                                        rightHandRule = new RightHandRule(firstRightOuterRuleMembrane,divisionResultingMembranes,rightMultiSet);
                                else
                                        rightHandRule = new RightHandRule(firstRightOuterRuleMembrane,secondRightOuterRuleMembrane,rightMultiSet);
                        try
                        {
                                AbstractRuleFactory factory=getPsystem().getAbstractPsystemFactory().getRuleFactory();
                                 if (isProbabilisticGuardedPsystem())
                          {

                                float probability = (float)1.0;
                                if(hasRatio) probability = ratio.floatValue();
                                  {
                                    RestrictiveGuard restrictiveGuard = new RestrictiveGuard();
                                    if(hasGuard){
                                        if(!(mainGuard instanceof  RestrictiveGuard))
                                                        throwSemanticsException("Probabilistic guarded rules can only define restrictive guards",beginRuleToken,endRuleToken);
                                        restrictiveGuard = (RestrictiveGuard)mainGuard;
                                        }
                                        restrictiveGuard.setFlags(((ProbabilisticGuardedPsystem)getPsystem()).getFlags());



                                        r = factory.createProbabilisticGuardedRule(
                                        firstRightOuterRuleMembrane.dissolves(),
                                        leftHandRule, rightHandRule, restrictiveGuard, ruleType,
                                        probability);
                                  }
                                if(!RuleChecker.checkProbability(r, probability, beginRuleToken, endRuleToken, this)
                                        ||!RuleChecker.checkExistingSourceAndDestinationMembrane(r, beginRuleToken, endRuleToken, this))
                                {
                                        r=null;
                                }

                                }
                                else if (hasGuard)
                                {
                                  if (isKernelPsystem())
                                        {

                                          if (relabelling)
                                                                ruleType = KernelRuleTypes.DIVISION;
                                                        else if (doubleArrow)
                                                                ruleType = KernelRuleTypes.INPUT_OUTPUT;
                                                        else ruleType = KernelRuleTypes.EVOLUTION;
                                          r = factory.createKernelRule(firstRightOuterRuleMembrane
                                                                .dissolves(), leftHandRule, rightHandRule, mainGuard, ruleType);
                                        }
                                }

                                else if (hasPriority)
                                {

                                        if(!isRegenerativePsystem())
                                        {
                                                r = factory.createPriorityRule(firstRightOuterRuleMembrane
                                                        .dissolves(), leftHandRule, rightHandRule, priority
                                                        .intValue());
                                        }
                                }
                                else if (isSpikingPsystem())
                                {

                                        if(existsFunctionalAstrocytes && this.ruleType != null && ( this.ruleType.equals("budding") || this.ruleType.equals("division") ))
                                                {if (true) throw new Exception("Can't add a budding or division rule in presence of Functional Astrocytes");}
                                        else
                                                existsBuddingOrDivisionRules = true;

                                        String type=this.ruleType;
                                        r = SpikingRule.buildRule(leftHandRule, rightHandRule, expr, ratio.longValue(), type,computeEfficiencyAttributes);
                                        this.ruleType = null;
                                }
                                else if (hasRatio) {
                                        r = factory.createConstantRule(firstRightOuterRuleMembrane
                                                        .dissolves(), leftHandRule, rightHandRule, ratio
                                                        .floatValue());

                                        if (RuleChecker.matchModelID(getPsystem(), "stochastic") &&
                                                        !noGeneStringsCheckRule.checkRule(r))
                                                r = (IStochasticRule)r;

                                        if (RuleChecker.matchModelID(getPsystem(), "probabilistic")) {
                                                if (ratio.floatValue() == 0) {
                                                        writeWarning("Rule ignored: " + r, beginRuleToken,
                                                                        endRuleToken);
                                                        r = null;
                                                }
                                        }
                                } else
                                {
                                        if (!isKernelPsystem())
                                                if (doubleArrow)
                                                        r = factory.createDoubleCommunicationRule(firstRightOuterRuleMembrane
                                                                .dissolves(), leftHandRule, rightHandRule);
                                        else
                                                r = factory.createBasicRule(firstRightOuterRuleMembrane
                                                        .dissolves(), leftHandRule, rightHandRule);
                                        else
                                        {
                                          if(doubleArrow)
                                                        ruleType = KernelRuleTypes.INPUT_OUTPUT;
                                                else if (relabelling)
                                                        ruleType=KernelRuleTypes.DIVISION;
                                                else
                                                        ruleType=KernelRuleTypes.EVOLUTION;
                                                r = factory.createKernelRule(firstRightOuterRuleMembrane
                                                        .dissolves(), leftHandRule, rightHandRule, mainGuard, ruleType);
                                        }
                                }
                                if(isRegenerativePsystem())
                                {
                                        if(secondRightOuterRuleMembrane!=null)
                                        {
                                          divisionResultingMembranes.clear();
                                          divisionResultingMembranes.add(secondRightOuterRuleMembrane);
                                          rightHandRule=new RightHandRule(rightHandRule.getOuterRuleMembrane(), divisionResultingMembranes, new HashMultiSet<String>());
                                                if(relabelling)
                                                {
                                                  ruleType=RegenerativeRuleTypes.DIVISION_BYTE;
                                                }else
                                                {
                                                  ruleType=RegenerativeRuleTypes.GEMMATION_BYTE;
                                                }
                                        } else
                                        {
                                                if(doubleArrow)
                                                        {
                                                          ruleType=RegenerativeRuleTypes.BUDDING_BYTE;
                                                        } else  {  if(unlinkingArrow)   {
                                                          ruleType=RegenerativeRuleTypes.UNLINKING_BYTE;
                                                        } else  {                       if(relabelling)
                                                                {
                                                                        ruleType=RegenerativeRuleTypes.LINKING_BYTE;
                                                                } else
                                                                {
                                                                        ruleType=RegenerativeRuleTypes.COMMUNICATION_BYTE;
                                                                }
                                                        }
                                                }
                                        }
                                        r = factory.createKernelRule(false, leftHandRule, rightHandRule, mainGuard, ruleType);
                                        IRegenerativeLikeRule regenerativeRule=(IRegenerativeLikeRule)r;
                                        regenerativeRule.setLinkObjects(((RegenerativePsystem)getPsystem()).getLinkObjects());
                                        regenerativeRule.setMembraneStructure((SimpleKernelLikeMembraneStructure)getPsystem().getMembraneStructure());
                                        if(hasPriority)
                                        {
                                                regenerativeRule.setPriority(priority.intValue());
                                        }


                                }

                                if (r != null) {
                                    try  {
                                                if (!getPsystem().getRules().checkRule(r)) {
                                                        errorCauses = getPsystem().getRules().getCheckRule()
                                                                        .getCausesString();
                                                        {       {if (true) throw new Exception("Rule doesn't match the \u005c""
                                                                                        + getPsystem()
                                                                                                        .getAbstractPsystemFactory()
                                                                                                        .getModelName()
                                                                                        + "\u005c" specification");}
                                                        }
                                                }
                                        } catch(NullPointerException e) {
                                          throwSemanticsException("Null pointer exception localized when reporting semantics errors");
                                        }
                                        try  {
                                                if (getPsystem().getRules().contains(r))
                                                        writeWarning("Repeated rule: " + r, beginRuleToken,
                                                                        endRuleToken);
                                                else {
                                                        r.setRuleId(++ruleCounter);
                                                        writeInfo("Adding rule: " + r, 4);
                                                        getPsystem().addRule(r);
                                                }
                                        } catch(NullPointerException e) {
                                          throwSemanticsException("Null pointer exception localized when reporting warnings");
                                        }
                                }
                        }
                        catch(NullPointerException ex)
                        {
                                throwSemanticsException("Null pointer exception localized in the rule parsing code",beginRuleToken,endRuleToken,errorCauses);
                        }
                        catch(Exception ex)
                        {
                                throwSemanticsException(ex.getMessage(),beginRuleToken,endRuleToken,errorCauses);
                        }
                }
  }

  final private OuterRuleMembrane rangedMembraneList(Label label, List<OuterRuleMembrane > divisionResultingMembranes) throws ParseException {
  OuterRuleMembrane resultingMembrane;
  Stack<Token > ranges = new Stack<Token >();
  List<Range > rangeList = new LinkedList<Range >();
  Token initToken=null, endToken=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSQUARE:
    case PLUS:
    case MINUS:
    case DIV:
    case OR:
      resultingMembrane = membraneList(label, divisionResultingMembranes);
      break;
    case AMPERSAND:
      jj_consume_token(AMPERSAND);
                initToken = token;
      jj_consume_token(LBRACE);
      resultingMembrane = membraneList(label, divisionResultingMembranes);
      jj_consume_token(RBRACE);
      jj_consume_token(COLON);
                                                                                                                                    endToken=token;
      jj_consume_token(LBRACE);
      rangeSequence(ranges, rangeList);
      jj_consume_token(RBRACE);
  try  {
  ObjectRangeExpander.expandMembranes(divisionResultingMembranes,
                        rangeList, ranges,
                        getCurrentEnvironment(),
                        nonCheckedVariables);
        }
                catch (ObjectRangeException ore)
        {
          throwSemanticsException("Only simple variables allowed in the iterator. \u005cnNot permitted use of parameters based on iterators of this type.",initToken,endToken);

}
        catch(CloneNotSupportedException e)
{
          throwSemanticsException("Errors ocurred while expanding the possible values for a membrane");
        }
      break;
    default:
      jj_la1[119] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  {if (true) return resultingMembrane;}
    throw new Error("Missing return statement in function");
  }

  final private OuterRuleMembrane membraneList(Label label, List<OuterRuleMembrane > divisionResultingMembranes) throws ParseException {
  OuterRuleMembrane resultingMembrane=null;
    label_34:
    while (true) {
      resultingMembrane = secondRightOuterRuleMembrane(label);
         divisionResultingMembranes.add(resultingMembrane);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSQUARE:
      case PLUS:
      case MINUS:
      case DIV:
      case OR:
        ;
        break;
      default:
        jj_la1[120] = jj_gen;
        break label_34;
      }
    }
           {if (true) return resultingMembrane;}
    throw new Error("Missing return statement in function");
  }

  final private Guard restrictiveGuard() throws ParseException {
   String o;
   RestrictiveGuard guard;
    o = object();
    if (!getCurrentEnvironment().isSafeMode())
        {if (true) return new RestrictiveUnaryUnitGuard(o);}
    else
        {if (true) return new RestrictiveGuard();}
    throw new Error("Missing return statement in function");
  }

  final private Guard guard() throws ParseException {
  LogicOperatedGuard logicOperatedGuard = new OrJoinedGuard();
  Guard auxiliaryGuard;
    auxiliaryGuard = nonIteratedAndJoinedGuard();
    logicOperatedGuard.addGuard(auxiliaryGuard);
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[121] = jj_gen;
        break label_35;
      }
      jj_consume_token(OR);
      auxiliaryGuard = nonIteratedAndJoinedGuard();
    logicOperatedGuard.addGuard(auxiliaryGuard);
    }
    {if (true) return logicOperatedGuard;}
    throw new Error("Missing return statement in function");
  }

  final private Guard andJoinedGuard(LogicOperatedGuard containerGuard) throws ParseException {
  LogicOperatedGuard logicOperatedGuard = new AndJoinedGuard();
  LogicOperatedGuard auxiliaryGuard;
  Stack<Token > ranges = new Stack<Token >();
  List<Range > rangeList = new LinkedList<Range >();
  Token initToken, endToken;
  boolean joinByAnd=false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AMPERSAND:
      jj_consume_token(AMPERSAND);
   joinByAnd=true;
      break;
    case BAR:
      jj_consume_token(BAR);
      break;
    default:
      jj_la1[122] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  initToken=token;
    jj_consume_token(LBRACE);
    auxiliaryGuard = nonIteratedAndJoinedGuard();
    jj_consume_token(RBRACE);
    jj_consume_token(COLON);
                                                                           endToken=token;
    jj_consume_token(LBRACE);
    rangeSequence(ranges, rangeList);
    jj_consume_token(RBRACE);
        try
        {
                logicOperatedGuard = ObjectRangeExpander.expandGuard(auxiliaryGuard, rangeList, ranges, getCurrentEnvironment(), nonCheckedVariables,joinByAnd);
                containerGuard.addGuard(logicOperatedGuard);
                {if (true) return logicOperatedGuard;}
        }
        catch (ObjectRangeException ore)
        {
          throwSemanticsException("Only simple variables allowed in the iterator. \u005cnNot permitted use of parameters based on iterators of this type.",initToken,endToken);
                //throwSemanticsException("Illegal operation. The use of parameters depending on the iteration variable is not allowed. Only the use of the variable itself is permitted!",token,token);
        }
    throw new Error("Missing return statement in function");
  }

  final private void unitaryGuard(LogicOperatedGuard logicOperatedGuard) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      jj_consume_token(LPAR);
      unitaryGuard(logicOperatedGuard);
      jj_consume_token(RPAR);
      break;
    case LBRACE:
      unitGuard(logicOperatedGuard);
      break;
    case AMPERSAND:
    case BAR:
      andJoinedGuard(logicOperatedGuard);
      break;
    default:
      jj_la1[123] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private LogicOperatedGuard nonIteratedAndJoinedGuard() throws ParseException {
  LogicOperatedGuard logicOperatedGuard = new AndJoinedGuard();
    unitaryGuard(logicOperatedGuard);
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[124] = jj_gen;
        break label_36;
      }
      jj_consume_token(AND);
      unitaryGuard(logicOperatedGuard);
    }
    {if (true) return logicOperatedGuard;}
    throw new Error("Missing return statement in function");
  }

  final private void unitGuard(LogicOperatedGuard guard) throws ParseException {
                                                   short op, sign; String obj;Number mul=1;Token beginObjToken; Token endObjToken;
    jj_consume_token(LBRACE);
  beginObjToken = token;
    op = relational_operator();
    sign = sign();
    obj = object();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MUL:
      jj_consume_token(MUL);
      mul = number0();
      break;
    default:
      jj_la1[125] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
                endObjToken=token;
                try
                {
                        if (!getCurrentEnvironment().isSafeMode())
                                guard.addGuard(new UnitGuard(op,sign,obj,mul.longValue()));
                }catch(Exception ex)
                {
                        throwSemanticsException(ex.getMessage(),beginObjToken,endObjToken);
                }
  }

  final private short relational_operator() throws ParseException {
                                       short op=0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIG:
      jj_consume_token(ASIG);
    op=ComparationMasks.EQUAL;
      break;
    case LESS_THAN:
      jj_consume_token(LESS_THAN);
    op=ComparationMasks.LESS_THAN;
      break;
    case GREATER_THAN:
      jj_consume_token(GREATER_THAN);
        op=ComparationMasks.GREATER_THAN;
      break;
    case LESS_OR_EQUAL_THAN:
      jj_consume_token(LESS_OR_EQUAL_THAN);
        op=ComparationMasks.LESS_OR_EQUAL_THAN;
      break;
    case GREATER_OR_EQUAL_THAN:
      jj_consume_token(GREATER_OR_EQUAL_THAN);
        op=ComparationMasks.GREATER_OR_EQUAL_THAN;
      break;
    case DIFF:
      jj_consume_token(DIFF);
     op=ComparationMasks.DIFF;
      break;
    default:
      jj_la1[126] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

  final private short sign() throws ParseException {
                        short sign=ComparationMasks.PLUS;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
           sign=ComparationMasks.MINUS;
      break;
    default:
      jj_la1[127] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return sign;}
    throw new Error("Missing return statement in function");
  }

  final private void assignment() throws ParseException {
                             String var,str;Number n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLLAR:
      var = stringVariable();
      jj_consume_token(ASIG);
      str = string();
                                               checkStopped();getCurrentEnvironment().setVariable(var,str);
      break;
    case ID:
      var = numericVariable();
      jj_consume_token(ASIG);
      n = number();
                                               checkStopped();getCurrentEnvironment().setVariable(var,n);
      break;
    default:
      jj_la1[128] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private Range range(Stack < Token > ranges, List<Range > rangeList) throws ParseException {
  Number n1 = null, n2 = null;
  boolean op1 = Range.LESS_OR_EQUAL_OPERATION, op2 = Range.LESS_OR_EQUAL_OPERATION, diff = false;
  String variable = null;
  Token rangeToken;
    rangeToken = token;
    n1 = number();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIFF:
      jj_consume_token(DIFF);
      diff = true;
      break;
    case LESS_THAN:
    case LESS_OR_EQUAL_THAN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS_THAN:
        jj_consume_token(LESS_THAN);
        op1 = Range.LESS_OPERATION;
        break;
      case LESS_OR_EQUAL_THAN:
        jj_consume_token(LESS_OR_EQUAL_THAN);
        break;
      default:
        jj_la1[129] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(ID);
      variable = token.image;
      if(rangeList!=null)
        nonCheckedVariables.add(variable);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS_THAN:
        jj_consume_token(LESS_THAN);
        op2 = Range.LESS_OPERATION;
        break;
      case LESS_OR_EQUAL_THAN:
        jj_consume_token(LESS_OR_EQUAL_THAN);
        break;
      default:
        jj_la1[130] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[131] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n2 = number();
    {if (true) return ObjectRangeExpander.processRanges(ranges, rangeList, getCurrentEnvironment(), diff, op1, op2, rangeToken, n1, n2, variable);}
    throw new Error("Missing return statement in function");
  }

  final private void rangeSequence(Stack < Token > ranges, List<Range > rangeList) throws ParseException {
    range(ranges, rangeList);
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[132] = jj_gen;
        break label_37;
      }
      jj_consume_token(COMMA);
      range(ranges, rangeList);
    }
  }

  final private void sentence() throws ParseException {
        Token sentenceToken;
        Stack<Token>ranges=new Stack<Token>();
    try {
                 checkStopped();
                        getCurrentEnvironment().incDepthLevel();
                        sentenceToken=token;
                        getCurrentEnvironment().enableSafeMode();
      instruction();
                        getCurrentEnvironment().decDepthLevel();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        rangeSequence(ranges, null);
        break;
      default:
        jj_la1[133] = jj_gen;
        ;
      }
      jj_consume_token(SEPARATOR);
                        doSentence(ranges,sentenceToken,getCurrentEnvironment(),true);
    } catch (ParseException ex) {
                getCurrentEnvironment().enableSafeMode();
                writeError(ex);
                Token t;
                do
                {checkStopped();
                         t=getNextToken();
                }while(t.kind!=SEPARATOR && t.kind!=EOF);
    }
  }

  final private void instruction() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CALL:
      moduleCall();
      break;
    case LET:
      jj_consume_token(LET);
      assignment();
      break;
    case PROPERTY:
      properties();
      break;
    case DUMMY:
      dummyMode();
      break;
    case MU:
      initConfiguration();
      break;
    case MARCS:
      marcs();
      break;
    case MDICT:
      mdict();
      break;
    case MINST:
      minst();
      break;
    case MSEQ:
      mseq();
      break;
    case MASYNCH:
      masynch();
      break;
    case MVALID:
      mvalid();
      break;
    case MEMB_IN:
      min();
      break;
    case MEMB_OUT:
      mout();
      break;
    case MULTISET:
      multiSetAsig();
      break;
    case FIRST_MULTISET:
      firstMultiSet();
      break;
    case SECOND_MULTISET:
      secondMultiSet();
      break;
    case INFENV_MULTISET:
      infEnvMultiSet();
      break;
    case GUARD:
    case ID:
    case DOLLAR:
    case EMPTY:
    case AMPERSAND:
    case LSQUARE:
    case LPAR:
    case PLUS:
    case MINUS:
    case DIV:
    case OR:
    case STRING_OBJECT:
      rule();
      break;
    case LBRACE:
      jj_consume_token(LBRACE);
      label_38:
      while (true) {
        sentence();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTISET:
        case FIRST_MULTISET:
        case SECOND_MULTISET:
        case INFENV_MULTISET:
        case CALL:
        case LET:
        case MU:
        case MEMB_IN:
        case MEMB_OUT:
        case MARCS:
        case MDICT:
        case MINST:
        case MSEQ:
        case MASYNCH:
        case MVALID:
        case GUARD:
        case ID:
        case DOLLAR:
        case EMPTY:
        case AMPERSAND:
        case LBRACE:
        case LSQUARE:
        case LPAR:
        case PLUS:
        case MINUS:
        case DIV:
        case OR:
        case STRING_OBJECT:
        case MOUTRES_BINARY:
        case MOUTRES_NATURAL:
        case MOUTRES_SUMMATORIES:
        case MASTF:
        case MASTH:
        case MASTFUNC:
        case PROPERTY:
        case DUMMY:
        case MBOUNDALL:
        case MLOCSET:
        case FVARIANT:
        case FRULE:
        case FP_IN:
        case FP_OUT:
        case PARALLEL:
        case FWEIGHT:
          ;
          break;
        default:
          jj_la1[134] = jj_gen;
          break label_38;
        }
      }
      jj_consume_token(RBRACE);
      break;
    case MOUTRES_BINARY:
      moutres_binary();
      break;
    case MOUTRES_SUMMATORIES:
      moutres_summatories();
      break;
    case MOUTRES_NATURAL:
      moutres_natural();
      break;
    case MASTH:
      mast_hybrid();
      break;
    case MASTF:
      mast_functional();
      break;
    case MASTFUNC:
      mastfunc();
      break;
    case MBOUNDALL:
      mboundall();
      break;
    case MLOCSET:
      mlocset();
      break;
    case FVARIANT:
      fvariant();
      break;
    case FP_IN:
      fp_in();
      break;
    case FP_OUT:
      fp_out();
      break;
    case FRULE:
      frule();
      break;
    case PARALLEL:
      parallel();
      break;
    case FWEIGHT:
      fweight();
      break;
    default:
      jj_la1[135] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private void grammar() throws ParseException {
                        checkStopped();
                nonCheckedVariables = new HashSet<String >();
                getCurrentEnvironment().disableSafeMode();
    variantDef();
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEF:
      case LET:
      case ID:
      case DOLLAR:
        ;
        break;
      default:
        jj_la1[136] = jj_gen;
        break label_39;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LET:
      case ID:
      case DOLLAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LET:
          jj_consume_token(LET);
          break;
        default:
          jj_la1[137] = jj_gen;
          ;
        }
        assignment();
        jj_consume_token(SEPARATOR);
                 checkStopped();
        break;
      case DEF:
        moduleDef();
                 checkStopped();
        break;
      default:
        jj_la1[138] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
                   if (getPsystem().getAbstractPsystemFactory()==null)
                        throwSemanticsException("Undefined P system model");
                   doCall("MAIN");
  }

  final private void firstMultiSet() throws ParseException {
                                boolean inc=false; MultiSet<String> ms = new HashMultiSet<String>();
    jj_consume_token(FIRST_MULTISET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INC:
      jj_consume_token(INC);
                               inc=true;
      break;
    case ASIG:
      jj_consume_token(ASIG);
      break;
    default:
      jj_la1[139] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    multiSet(ms);
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (inc)
                                getPsystem().getFirstMultiSet().addAll(ms);
                        else
                                getPsystem().setFirstMultiSet(ms);
                }
  }

  final private void secondMultiSet() throws ParseException {
                                 boolean inc=false; MultiSet<String> ms = new HashMultiSet<String>();
    jj_consume_token(SECOND_MULTISET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INC:
      jj_consume_token(INC);
                                inc=true;
      break;
    case ASIG:
      jj_consume_token(ASIG);
      break;
    default:
      jj_la1[140] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    multiSet(ms);
                if (!getCurrentEnvironment().isSafeMode())
                {
                        if (inc)
                                getPsystem().getSecondMultiSet().addAll(ms);
                        else
                                getPsystem().setSecondMultiSet(ms);
                }
  }

  final private void infEnvMultiSet() throws ParseException {
                                 boolean inc=false; MultiSet<String> ms = new HashMultiSet<String>();
    jj_consume_token(INFENV_MULTISET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INC:
      jj_consume_token(INC);
                                inc=true;
      break;
    case ASIG:
      jj_consume_token(ASIG);
      break;
    default:
      jj_la1[141] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    multiSet(ms);
                if (!getCurrentEnvironment().isSafeMode())
                {

                        if (!isCellLikeInfEnvPsystem())
                                throwSemanticsException("Invalid sentence",token,token);
                        else
                        {
                                CellLikeInfEnvPsystem infps = (CellLikeInfEnvPsystem)getPsystem();

                                if (inc)
                                        infps.getEnvInfMultiSet().addAll(ms);
                                else
                                        infps.setEnvInfMultiSet(ms);
                        }

                }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(SIN)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(STRING_OBJECT)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(CEIL)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_53()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(INTDIV)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(COS)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_40()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(LOG)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_66()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_49()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(PI)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(ROUND)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_46()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(NATURAL_NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_54()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(MAX0)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(POW)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_60()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_61()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(FLOOR)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public PlinguaJavaCcParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[142];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1fc0000,0x1fc0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf003ef00,0x0,0x0,0x1fc0000,0x0,0x1fc0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x2000000,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1fc0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1fc0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf003ef00,0xf003ef00,0x5000,0x4000,0x5000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x28,0x20000000,0x400000,0x100000,0x60000000,0x60000000,0x3000,0x2007010,0x0,0x0,0x0,0x80000000,0x80000000,0x60000000,0x60000000,0x30,0x100000,0x30,0x30,0x62928037,0x400000,0x30,0x62007038,0x400000,0x62007038,0x2000000,0x80000000,0x60000000,0x400000,0x101030,0x400000,0x8,0x400000,0x0,0x0,0x60000000,0x28030,0x28030,0x60800000,0x40,0x28030,0x60800000,0x40,0x28030,0x60800000,0x8030,0x8030,0x60800000,0x40,0x30,0x400000,0x30,0x400000,0x8030,0x400000,0x8030,0x28030,0x28030,0x400000,0x8030,0x400000,0x0,0x400000,0x0,0x400000,0x101030,0x0,0x0,0x400000,0x2000000,0x400000,0x0,0x400000,0x2000000,0x0,0x400000,0x2000000,0x0,0x400000,0x2000000,0x400000,0x30,0x400000,0x2000000,0x400000,0x62007010,0x400000,0x10,0x400000,0x100000,0x400000,0x101030,0x0,0x400000,0x0,0x400000,0x101030,0x62807010,0x101030,0x400000,0x400000,0x0,0x0,0x60901030,0x2000000,0x2160030,0x4,0x2000000,0x28030,0x28030,0x780,0x28030,0x60820000,0x28030,0x60800000,0x28030,0x0,0x1000080,0x10000000,0x60820000,0x60800000,0x0,0x60000,0x2160000,0x0,0x80000000,0x0,0x60000000,0x30,0x0,0x0,0x0,0x400000,0x8000000,0x62928037,0x62928037,0x30,0x0,0x30,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x7,0x7,0x0,0x0,0x0,0x0,0x4000,0x0,0x9fffe001,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x2001,0x2001,0x0,0x4000,0x4000,0x2001,0x0,0x4000,0x2001,0x0,0x4000,0x2001,0x4000,0x4000,0x2001,0x0,0x4000,0x0,0x4000,0x0,0x4000,0x0,0x4000,0x4000,0x4000,0x0,0x4000,0x0,0x410,0x0,0x410,0x0,0x4000,0x410,0x20,0x0,0x0,0x0,0x410,0x0,0x0,0x410,0x0,0x0,0x410,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x410,0x0,0x410,0x0,0x4000,0x0,0x60004000,0x0,0x0,0xc00,0xc10,0x6001,0xc10,0x4000,0x0,0x0,0x4000,0x4000,0x0,0x4000,0x2001,0x4000,0x2001,0x4000,0x0,0x0,0x0,0x2001,0x2001,0x2000,0x0,0x0,0x1000,0x0,0x3f0,0x0,0x0,0xa0,0xa0,0x2a0,0x0,0x0,0x9fffe001,0x9fffe001,0x0,0x0,0x0,0x410,0x410,0x410,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PlinguaJavaCcParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PlinguaJavaCcParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PlinguaJavaCcParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 142; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 142; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PlinguaJavaCcParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PlinguaJavaCcParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 142; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 142; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PlinguaJavaCcParser(PlinguaJavaCcParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 142; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PlinguaJavaCcParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 142; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[97];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 142; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 97; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
